// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace ViewControllerUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Launches the application.
        /// </summary>
        public void AppLaunch()
        {
            #region Variable Declarations
            WinControl uIItemImage = this.UISpreadsheetGUIWindow.UIItemWindow.UISpreadsheetGUIexeShoListItem.UIItemImage;
            #endregion

            // Double-Click image
            Mouse.DoubleClick(uIItemImage, new Point(10, 11));
        }
        
        /// <summary>
        /// Checks for proper cell selection.
        /// </summary>
        public void CellSelection1()
        {
            #region Variable Declarations
            WinText uIA3Text = this.UISpreadsheetuntitledWindow.UIA1Window.UIA3Text;
            #endregion

            // Verify that the 'DisplayText' property of 'A3' label equals 'A3'
            Assert.AreEqual(this.CellSelection1ExpectedValues.UIA3TextDisplayText, uIA3Text.DisplayText, "Improper cell selection.");
        }
        
        /// <summary>
        /// Checks proper functionality of cell selection.
        /// </summary>
        public void CellSelection10()
        {
            #region Variable Declarations
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'TextContents' text box equals '=A4/0.123456789'
            Assert.AreEqual(this.CellSelection10ExpectedValues.UITextContentsEditText, uITextContentsEdit.Text, "Contents of cell must be a Formula.");
        }
        
        /// <summary>
        /// Checks proper cell selection.
        /// </summary>
        public void CellSelection11()
        {
            #region Variable Declarations
            WinText uIA5Text = this.UISpreadsheetuntitledWindow.UIA1Window.UIA5Text;
            #endregion

            // Verify that the 'DisplayText' property of 'A5' label equals 'A5'
            Assert.AreEqual(this.CellSelection11ExpectedValues.UIA5TextDisplayText, uIA5Text.DisplayText, "Improper cell selection.");
        }
        
        /// <summary>
        /// Checks for proper cell selection.
        /// </summary>
        public void CellSelection2()
        {
            #region Variable Declarations
            WinText uIA3Text = this.UISpreadsheetuntitledWindow.UIA1Window1.UIA3Text;
            #endregion

            // Verify that the 'DisplayText' property of 'A3' label equals 'A3'
            Assert.AreEqual(this.CellSelection2ExpectedValues.UIA3TextDisplayText, uIA3Text.DisplayText, "Improper cell selection.");
        }
        
        /// <summary>
        /// Checks for proper cell value of selected cell.
        /// </summary>
        public void CellSelection3()
        {
            #region Variable Declarations
            WinText uIItem3Text = this.UISpreadsheetuntitledWindow.UILabelValue2Window.UIItem3Text;
            #endregion

            // Verify that the 'DisplayText' property of '3' label equals '3'
            Assert.AreEqual(this.CellSelection3ExpectedValues.UIItem3TextDisplayText, uIItem3Text.DisplayText, "Improper cell selection.");
        }
        
        /// <summary>
        /// Checks for proper cell contents of selected cell.
        /// </summary>
        public void CellSelection4()
        {
            #region Variable Declarations
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'TextContents' text box equals '3'
            Assert.AreEqual(this.CellSelection4ExpectedValues.UITextContentsEditText, uITextContentsEdit.Text, "Improper cell selection.");
        }
        
        /// <summary>
        /// Checks for proper cell selection.
        /// </summary>
        public void CellSelection5()
        {
            #region Variable Declarations
            WinText uIA10Text = this.UISpreadsheetuntitledWindow.UIA1Window.UIA10Text;
            #endregion

            // Verify that the 'Name' property of 'A10' label equals 'A10'
            Assert.AreEqual(this.CellSelection5ExpectedValues.UIA10TextName, uIA10Text.Name, "Improper cell selection.");
        }
        
        /// <summary>
        /// Checks for proper cell selection.
        /// </summary>
        public void CellSelection6()
        {
            #region Variable Declarations
            WinText uIA10Text = this.UISpreadsheetuntitledWindow.UIA1Window.UIA10Text;
            #endregion

            // Verify that the 'DisplayText' property of 'A10' label equals 'A10'
            Assert.AreEqual(this.CellSelection6ExpectedValues.UIA10TextDisplayText, uIA10Text.DisplayText, "Improper cell selection.");
        }
        
        /// <summary>
        /// Checks proper cell selection.
        /// </summary>
        public void CellSelection7()
        {
            #region Variable Declarations
            WinText uIA9Text = this.UISpreadsheetuntitledWindow.UIA1Window.UIA9Text;
            #endregion

            // Verify that the 'DisplayText' property of 'A9' label equals 'A9'
            Assert.AreEqual(this.CellSelection7ExpectedValues.UIA9TextDisplayText, uIA9Text.DisplayText, "Improper cell selection.");
        }
        
        /// <summary>
        /// Checks proper cell selection.
        /// </summary>
        public void CellSelection8()
        {
            #region Variable Declarations
            WinText uIItem3Text = this.UISpreadsheetuntitledWindow.UILabelValue2Window.UIItem3Text;
            #endregion

            // Verify that the 'DisplayText' property of '3' label equals '3'
            Assert.AreEqual(this.CellSelection8ExpectedValues.UIItem3TextDisplayText, uIItem3Text.DisplayText, "Value of cell must be a double.");
        }
        
        /// <summary>
        /// Checks proper functionality of cell selection.
        /// </summary>
        public void CellSelection9()
        {
            #region Variable Declarations
            WinText uIItem555984005059454Text = this.UISpreadsheetuntitledWindow.UILabelValue2Window.UIItem555984005059454Text;
            #endregion

            // Verify that the 'DisplayText' property of '-55598.4005059454' label equals '-55598.4005059454'
            Assert.AreEqual(this.CellSelection9ExpectedValues.UIItem555984005059454TextDisplayText, uIItem555984005059454Text.DisplayText, "Value of cell must be a double.");
        }
        
        /// <summary>
        /// Creates a circular dependency. Form should be unchanged.
        /// </summary>
        public void Circular1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetuntitledWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            WinButton uIOKButton = this.UIErrorExceptionoftypeWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(68, 107));

            // Type '=a1' in 'TextContents' text box
            uITextContentsEdit.Text = this.Circular1Params.UITextContentsEditText;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.Circular1Params.UITextContentsEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(34, 16));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(61, 100));
        }
        
        /// <summary>
        /// Verifies that the Form was unchanged as a result of the exception.
        /// </summary>
        public void Circular2()
        {
            #region Variable Declarations
            WinText uIA4Text = this.UISpreadsheetuntitledWindow.UILabelValue2Window.UIA4Text;
            #endregion

            // Verify that the 'DisplayText' property of 'A4' label equals ''
            Assert.AreEqual(this.Circular2ExpectedValues.UIA4TextDisplayText, uIA4Text.DisplayText, "Empty cell must have an empty string as its value.");
        }
        
        /// <summary>
        /// Creates a circular dependency. Form should be unchanged as a result.
        /// </summary>
        public void Circular3()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetuntitledWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            WinButton uIOKButton = this.UIErrorExceptionoftypeWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(79, 80));

            // Type '=A1' in 'TextContents' text box
            uITextContentsEdit.Text = this.Circular3Params.UITextContentsEditText;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.Circular3Params.UITextContentsEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(53, 9));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(65, 78));
        }
        
        /// <summary>
        /// Checks that the contents of a cell are unchanged in the event that a circular exception is caught.
        /// </summary>
        public void Circular4()
        {
            #region Variable Declarations
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'TextContents' text box equals '=A4+1'
            Assert.AreEqual(this.Circular4ExpectedValues.UITextContentsEditText, uITextContentsEdit.Text, "Circular exception must not change contents of cell.");
        }
        
        /// <summary>
        /// Closes the application.
        /// </summary>
        public void Close1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetuntitledWindow.UISpreadsheetuntitledTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(23, 12));
        }
        
        /// <summary>
        /// Closes the application.
        /// </summary>
        public void Close2()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetuntitledWindow.UISpreadsheetuntitledTitleBar.UICloseButton;
            WinButton uICancelButton = this.UIWarningUnsavedchangeWindow.UICancelWindow.UICancelButton;
            WinButton uINOButton = this.UIWarningUnsavedchangeWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(28, 13));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(46, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(26, 11));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(39, 9));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 8));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(35, 10));
        }
        
        /// <summary>
        /// Closes the application without saving.
        /// </summary>
        public void Close3()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetuntitledWindow.UISpreadsheetuntitledTitleBar.UICloseButton;
            WinButton uICancelButton = this.UIWarningUnsavedchangeWindow.UICancelWindow.UICancelButton;
            WinButton uINOButton = this.UIWarningUnsavedchangeWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(12, 17));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(18, 8));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 20));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(39, 9));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(19, 20));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(49, 17));
        }
        
        /// <summary>
        /// Save over existing file, closes application.
        /// </summary>
        public void Close4()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetUITestRecWindow2.UISpreadsheetUITestRecTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIWarningUnsavedchangeWindow.UIYesWindow.UIYesButton;
            WinEdit uINameEdit = this.UISaveAsWindow.UIItemWindow1.UIUITestRecorder3ssListItem.UINameEdit;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton1 = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(20, 7));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(56, 12));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(29, 10));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(51, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(38, 11));
        }
        
        /// <summary>
        /// Closes the Form without saving.
        /// </summary>
        public void Close6()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetuntitledWindow.UISpreadsheetuntitledTitleBar.UICloseButton;
            WinButton uICancelButton = this.UIWarningUnsavedchangeWindow.UICancelWindow.UICancelButton;
            WinButton uINOButton = this.UIWarningUnsavedchangeWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 12));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(57, 15));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 9));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(56, 16));
        }
        
        /// <summary>
        /// Closes the application without saving.
        /// </summary>
        public void Close7()
        {
            #region Variable Declarations
            WinTitleBar uISpreadsheetuntitledTitleBar = this.UISpreadsheetuntitledWindow.UISpreadsheetuntitledTitleBar;
            WinButton uICloseButton = this.UISpreadsheetuntitledWindow.UISpreadsheetuntitledTitleBar.UICloseButton;
            WinButton uINOButton = this.UIWarningUnsavedchangeWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Spreadsheet - untitled' title bar
            Mouse.Click(uISpreadsheetuntitledTitleBar, new Point(63, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 10));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(51, 8));
        }
        
        /// <summary>
        /// Closes the current Form (exiting the program). Program is relaunched and Form is opened from Menu bar.
        /// </summary>
        public void CloseOpen1()
        {
            #region Variable Declarations
            WinMenuItem uICloseMenuItem = this.UISpreadsheetUITestRecWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinEdit uINameEdit = this.UISpreadsheetGUIWindow.UIItemWindow.UISpreadsheetGUIexeShoListItem.UINameEdit;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetuntitledWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit1 = this.UIOpenWindow.UIItemWindow.UIUITestRecorder1ssListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetUITestRecWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(76, 16));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(23, 10));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(60, 7));

            // Click 'Name' text box
            Mouse.Click(uINameEdit1, new Point(44, 14));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(45, 16));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(89, 204));
        }
        
        /// <summary>
        /// Inputs a collection of data.
        /// </summary>
        public void DataInput1()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UISpreadsheetGUIWindow.UIItemWindow.UISpreadsheetGUIexeShoListItem.UINameEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetuntitledWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(28, 18));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(92, 47));

            // Type '1' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput1Params.UITextContentsEditText;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput1Params.UITextContentsEditSendKeys, ModifierKeys.None);

            // Type '2' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput1Params.UITextContentsEditText1;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput1Params.UITextContentsEditSendKeys1, ModifierKeys.None);

            // Type '3' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput1Params.UITextContentsEditText2;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput1Params.UITextContentsEditSendKeys2, ModifierKeys.None);

            // Type '4' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput1Params.UITextContentsEditText3;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput1Params.UITextContentsEditSendKeys3, ModifierKeys.None);

            // Type '5' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput1Params.UITextContentsEditText4;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput1Params.UITextContentsEditSendKeys4, ModifierKeys.None);

            // Type '6' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput1Params.UITextContentsEditText5;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput1Params.UITextContentsEditSendKeys5, ModifierKeys.None);

            // Type '7' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput1Params.UITextContentsEditText6;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput1Params.UITextContentsEditSendKeys6, ModifierKeys.None);

            // Type '8' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput1Params.UITextContentsEditText7;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput1Params.UITextContentsEditSendKeys7, ModifierKeys.None);

            // Type '9' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput1Params.UITextContentsEditText8;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput1Params.UITextContentsEditSendKeys8, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(70, 78));
        }
        
        /// <summary>
        /// Inputs a collection of data resulting in a FormulaError.
        /// </summary>
        public void DataInput10()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetuntitledWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(68, 103));

            // Type '' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput10Params.UITextContentsEditText;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput10Params.UITextContentsEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(81, 39));
        }
        
        /// <summary>
        /// Inputs a collection of data.
        /// </summary>
        public void DataInput2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetuntitledWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(139, 45));

            // Type '-33' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput2Params.UITextContentsEditText;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput2Params.UITextContentsEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(64, 221));
        }
        
        /// <summary>
        /// Inputs a collection of data.
        /// </summary>
        public void DataInput3()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UISpreadsheetGUIWindow.UIItemWindow.UISpreadsheetGUIexeShoListItem.UINameEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetuntitledWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(3, 10));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(80, 42));

            // Type '337648' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput3Params.UITextContentsEditText;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput3Params.UITextContentsEditSendKeys, ModifierKeys.None);

            // Type '-79871' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput3Params.UITextContentsEditText1;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput3Params.UITextContentsEditSendKeys1, ModifierKeys.None);

            // Type '0.132247' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput3Params.UITextContentsEditText2;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput3Params.UITextContentsEditSendKeys2, ModifierKeys.None);

            // Type '3.78943' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput3Params.UITextContentsEditText3;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput3Params.UITextContentsEditSendKeys3, ModifierKeys.None);

            // Type '3.14' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput3Params.UITextContentsEditText4;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput3Params.UITextContentsEditSendKeys4, ModifierKeys.None);

            // Type '7984' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput3Params.UITextContentsEditText5;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput3Params.UITextContentsEditSendKeys5, ModifierKeys.None);

            // Type '39965' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput3Params.UITextContentsEditText6;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput3Params.UITextContentsEditSendKeys6, ModifierKeys.None);

            // Type '-784654' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput3Params.UITextContentsEditText7;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput3Params.UITextContentsEditSendKeys7, ModifierKeys.None);

            // Type '=A1+a2*a3/a4-a5*a6/a7+a8' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput3Params.UITextContentsEditText8;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput3Params.UITextContentsEditSendKeys8, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(86, 202));
        }
        
        /// <summary>
        /// Inputs a collection of data resulting in a FormulaError.
        /// </summary>
        public void DataInput4()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetuntitledWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(152, 38));

            // Type 'abcdefghijklmnopqrstuvwxyz' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput4Params.UITextContentsEditText;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput4Params.UITextContentsEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(86, 198));

            // Type '=A1+A2*A3/A4-A5*A6/A7+A8*b1' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput4Params.UITextContentsEditText1;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput4Params.UITextContentsEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(87, 199));
        }
        
        /// <summary>
        /// Inputs a collection of data resolving FormulaError.
        /// </summary>
        public void DataInput5()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetUITestRecWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextContentsEdit = this.UISpreadsheetUITestRecWindow.UITextContentsWindow.UITextContentsEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(166, 43));

            // Type '735' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput5Params.UITextContentsEditText;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput5Params.UITextContentsEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(79, 198));
        }
        
        /// <summary>
        /// Inputs a collection of data, saves files, appends data, saves over existing file, inputs data resulting in FormulaError.
        /// </summary>
        public void DataInput6()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UISpreadsheetGUIWindow.UIItemWindow.UISpreadsheetGUIexeShoListItem.UINameEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetuntitledWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetuntitledWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinEdit uINameEdit1 = this.UISaveAsWindow.UIItemWindow1.UIUITestRecorder3ssListItem.UINameEdit;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(24, 13));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(75, 39));

            // Type 'Hello World' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput6Params.UITextContentsEditText;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput6Params.UITextContentsEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(69, 11));

            // Select 'UITestRecorder3' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.DataInput6Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.DataInput6Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(88, 62));

            // Type 'Goodbye World' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput6Params.UITextContentsEditText1;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput6Params.UITextContentsEditSendKeys1, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(60, 10));

            // Click 'Name' text box
            Mouse.Click(uINameEdit1, new Point(46, 11));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(37, 15));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(40, 11));

            // Type 'This should not have crashed. If so, there is a problem.' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput6Params.UITextContentsEditText2;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput6Params.UITextContentsEditSendKeys2, ModifierKeys.None);

            // Type '1' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput6Params.UITextContentsEditText3;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput6Params.UITextContentsEditSendKeys3, ModifierKeys.None);

            // Type '2' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput6Params.UITextContentsEditText4;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput6Params.UITextContentsEditSendKeys4, ModifierKeys.None);

            // Type '3' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput6Params.UITextContentsEditText5;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput6Params.UITextContentsEditSendKeys5, ModifierKeys.None);

            // Type '=a4+a5+a6+b1' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput6Params.UITextContentsEditText6;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput6Params.UITextContentsEditSendKeys6, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(68, 158));
        }
        
        /// <summary>
        /// Inputs a collection of data resolving FormulaError.
        /// </summary>
        public void DataInput7()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetUITestRecWindow2.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextContentsEdit = this.UISpreadsheetUITestRecWindow2.UITextContentsWindow.UITextContentsEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(147, 38));

            // Type '987456321.123456987' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput7Params.UITextContentsEditText;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput7Params.UITextContentsEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(86, 157));
        }
        
        /// <summary>
        /// Inputs a collection of data. At one point the input throws and exception caught by the GUI that cells cannot equal themselves.
        /// </summary>
        public void DataInput8()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UISpreadsheetGUIWindow.UIItemWindow.UISpreadsheetGUIexeShoListItem.UINameEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetuntitledWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            WinButton uIOKButton = this.UIErrorExceptionoftypeWindow.UIOKWindow.UIOKButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(4, 6));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(71, 42));

            // Type '1' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput8Params.UITextContentsEditText;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput8Params.UITextContentsEditSendKeys, ModifierKeys.None);

            // Type '=a1+1' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput8Params.UITextContentsEditText1;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput8Params.UITextContentsEditSendKeys1, ModifierKeys.None);

            // Type '=a2-90' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput8Params.UITextContentsEditText2;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput8Params.UITextContentsEditSendKeys2, ModifierKeys.None);

            // Type '=a3*78' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput8Params.UITextContentsEditText3;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput8Params.UITextContentsEditSendKeys3, ModifierKeys.None);

            // Type '=a4/0.123456789' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput8Params.UITextContentsEditText4;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput8Params.UITextContentsEditSendKeys4, ModifierKeys.None);

            // Type '=a5*0.000001' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput8Params.UITextContentsEditText5;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput8Params.UITextContentsEditSendKeys5, ModifierKeys.None);

            // Type '=a6+3.14' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput8Params.UITextContentsEditText6;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput8Params.UITextContentsEditSendKeys6, ModifierKeys.None);

            // Type '=a7*0' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput8Params.UITextContentsEditText7;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput8Params.UITextContentsEditSendKeys7, ModifierKeys.None);

            // Type '=a9+3' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput8Params.UITextContentsEditText8;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput8Params.UITextContentsEditSendKeys8, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(34, 18));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(66, 199));

            // Type '=a8+3' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput8Params.UITextContentsEditText9;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput8Params.UITextContentsEditSendKeys9, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(63, 205));
        }
        
        /// <summary>
        /// Inputs a collection of data.
        /// </summary>
        public void DataInput9()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UISpreadsheetGUIWindow.UIItemWindow.UISpreadsheetGUIexeShoListItem.UINameEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetuntitledWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(23, 9));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(70, 40));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(70, 38));

            // Type '=a2+1' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput9Params.UITextContentsEditText;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput9Params.UITextContentsEditSendKeys, ModifierKeys.None);

            // Type '=a3+1' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput9Params.UITextContentsEditText1;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput9Params.UITextContentsEditSendKeys1, ModifierKeys.None);

            // Type '=a4+1' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput9Params.UITextContentsEditText2;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput9Params.UITextContentsEditSendKeys2, ModifierKeys.None);

            // Type '=1' in 'TextContents' text box
            uITextContentsEdit.Text = this.DataInput9Params.UITextContentsEditText3;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.DataInput9Params.UITextContentsEditSendKeys3, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(79, 95));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(73, 41));
        }
        
        /// <summary>
        /// Executes the Option menu features.
        /// </summary>
        public void Features1()
        {
            #region Variable Declarations
            WinMenuItem uIDisplayDependentsMenuItem = this.UISpreadsheetuntitledWindow.UIMenuStrip1MenuBar.UIOptionsMenuItem.UIDisplayDependentsMenuItem;
            WinButton uIOKButton = this.UIA9sDependentsAreTheFWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIShowAllNegativesMenuItem = this.UISpreadsheetuntitledWindow.UIMenuStrip1MenuBar.UIOptionsMenuItem.UIShowAllNegativesMenuItem;
            WinButton uIOKButton1 = this.UITheFollowingCellsHavWindow.UIOKWindow.UIOKButton;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetuntitledWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uIOKButton2 = this.UIA1sDependentsAreTheFWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton3 = this.UIA5sDependentsAreTheFWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Options' -> 'Display Dependents' menu item
            Mouse.Click(uIDisplayDependentsMenuItem, new Point(83, 8));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(47, 12));

            // Click 'Options' -> 'Show All Negatives' menu item
            Mouse.Click(uIShowAllNegativesMenuItem, new Point(92, 14));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(44, 8));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(89, 47));

            // Click 'Options' -> 'Display Dependents' menu item
            Mouse.Click(uIDisplayDependentsMenuItem, new Point(42, 2));

            // Click 'OK' button
            Mouse.Click(uIOKButton2, new Point(41, 5));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(68, 124));

            // Click 'Options' -> 'Display Dependents' menu item
            Mouse.Click(uIDisplayDependentsMenuItem, new Point(47, 6));

            // Click 'OK' button
            Mouse.Click(uIOKButton3, new Point(49, 14));

            // Click 'Options' -> 'Show All Negatives' menu item
            Mouse.Click(uIShowAllNegativesMenuItem, new Point(64, 2));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(42, 11));
        }
        
        /// <summary>
        /// Checks that the current value of a cell is a FormulaError.
        /// </summary>
        public void FormulaError1()
        {
            #region Variable Declarations
            WinText uISpreadsheetUtilitiesText = this.UISpreadsheetuntitledWindow.UILabelValue2Window.UISpreadsheetUtilitiesText;
            #endregion

            // Verify that the 'DisplayText' property of 'SpreadsheetUtilities.FormulaError' label equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.FormulaError1ExpectedValues.UISpreadsheetUtilitiesTextDisplayText, uISpreadsheetUtilitiesText.DisplayText, "The value of the cell must be a FormulaError.");
        }
        
        /// <summary>
        /// Verifies that the value of a cell is not a FormulaError.
        /// </summary>
        public void FormulaError10()
        {
            #region Variable Declarations
            WinText uIItem987456327123457Text = this.UISpreadsheetUITestRecWindow2.UISpreadsheetUtilitiesWindow.UIItem987456327123457Text;
            #endregion

            // Verify that the 'DisplayText' property of '987456327.123457' label equals '987456327.123457'
            Assert.AreEqual(this.FormulaError10ExpectedValues.UIItem987456327123457TextDisplayText, uIItem987456327123457Text.DisplayText, "Value of cell must be a double");
        }
        
        /// <summary>
        /// Verifies that the value of a cell is not a FormulaError.
        /// </summary>
        public void FormulaError11()
        {
            #region Variable Declarations
            WinText uIItem4Text = this.UISpreadsheetuntitledWindow.UILabelValue2Window.UIItem4Text;
            #endregion

            // Verify that the 'DisplayText' property of '4' label equals '4'
            Assert.AreEqual(this.FormulaError11ExpectedValues.UIItem4TextDisplayText, uIItem4Text.DisplayText, "Value of cell must be a double.");
        }
        
        /// <summary>
        /// Checks that the current value of a cell is not a FormulaError.
        /// </summary>
        public void FormulaError2()
        {
            #region Variable Declarations
            WinText uIItem12Text = this.UISpreadsheetuntitledWindow.UILabelValue2Window.UIItem12Text;
            #endregion

            // Verify that the 'DisplayText' property of '12' label equals '12'
            Assert.AreEqual(this.FormulaError2ExpectedValues.UIItem12TextDisplayText, uIItem12Text.DisplayText, "Value of cell must be a number.");
        }
        
        /// <summary>
        /// Checks that the contents of a cell contain a Formula.
        /// </summary>
        public void FormulaError3()
        {
            #region Variable Declarations
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'TextContents' text box equals '=A1+A2+A3+A4+A5+A6+A7+A8+A9+B1'
            Assert.AreEqual(this.FormulaError3ExpectedValues.UITextContentsEditText, uITextContentsEdit.Text, "Contents of selected cell must be a Formula.");
        }
        
        /// <summary>
        /// Verifies that the value of a cell is not a FormulaError.
        /// </summary>
        public void FormulaError4()
        {
            #region Variable Declarations
            WinText uIItem449794038628359Text = this.UISpreadsheetuntitledWindow.UILabelValue2Window.UIItem449794038628359Text;
            #endregion

            // Verify that the 'DisplayText' property of '-449794.038628359' label equals '-449794.038628359'
            Assert.AreEqual(this.FormulaError4ExpectedValues.UIItem449794038628359TextDisplayText, uIItem449794038628359Text.DisplayText, "Value of cell must be a double.");
        }
        
        /// <summary>
        /// Verfies that the contents of a cell is a Formula.
        /// </summary>
        public void FormulaError5()
        {
            #region Variable Declarations
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'TextContents' text box equals '=A1+A2*A3/A4-A5*A6/A7+A8'
            Assert.AreEqual(this.FormulaError5ExpectedValues.UITextContentsEditText, uITextContentsEdit.Text, "Contents of cell must be a Formula.");
        }
        
        /// <summary>
        /// Verifies that the value of a cell is a FormulaError.
        /// </summary>
        public void FormulaError6()
        {
            #region Variable Declarations
            WinText uISpreadsheetUtilitiesText = this.UISpreadsheetuntitledWindow.UILabelValue2Window.UISpreadsheetUtilitiesText;
            #endregion

            // Verify that the 'DisplayText' property of 'SpreadsheetUtilities.FormulaError' label equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.FormulaError6ExpectedValues.UISpreadsheetUtilitiesTextDisplayText, uISpreadsheetUtilitiesText.DisplayText, "Value of cell must be a FormulaError.");
        }
        
        /// <summary>
        /// Verifies that the value of a cell is a FormulaError.
        /// </summary>
        public void FormulaError7()
        {
            #region Variable Declarations
            WinText uISpreadsheetUtilitiesText = this.UISpreadsheetUITestRecWindow.UISpreadsheetUtilitiesWindow.UISpreadsheetUtilitiesText;
            #endregion

            // Verify that the 'DisplayText' property of 'SpreadsheetUtilities.FormulaError' label equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.FormulaError7ExpectedValues.UISpreadsheetUtilitiesTextDisplayText, uISpreadsheetUtilitiesText.DisplayText, "Value of cell must be a FormulaError.");
        }
        
        /// <summary>
        /// Verifies that the value of a cell is not a FormulaError.
        /// </summary>
        public void FormulaError8()
        {
            #region Variable Declarations
            WinText uIItem576385830038628Text = this.UISpreadsheetUITestRecWindow.UISpreadsheetUtilitiesWindow.UIItem576385830038628Text;
            #endregion

            // Verify that the 'DisplayText' property of '-576385830.038628' label equals '-576385830.038628'
            Assert.AreEqual(this.FormulaError8ExpectedValues.UIItem576385830038628TextDisplayText, uIItem576385830038628Text.DisplayText, "Value of cell must be a double.");
        }
        
        /// <summary>
        /// Verifies that the value of a cell is FormulaError.
        /// </summary>
        public void FormulaError9()
        {
            #region Variable Declarations
            WinText uISpreadsheetUtilitiesText = this.UISpreadsheetUITestRecWindow2.UISpreadsheetUtilitiesWindow.UISpreadsheetUtilitiesText;
            #endregion

            // Verify that the 'DisplayText' property of 'SpreadsheetUtilities.FormulaError' label equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.FormulaError9ExpectedValues.UISpreadsheetUtilitiesTextDisplayText, uISpreadsheetUtilitiesText.DisplayText, "Value of cell must be a FormulaError.");
        }
        
        /// <summary>
        /// Opens the application and launches the help menu.
        /// </summary>
        public void Help()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UISpreadsheetGUIWindow.UIItemWindow.UISpreadsheetGUIexeShoListItem.UINameEdit;
            WinMenuItem uIViewHelpMenuItem = this.UISpreadsheetuntitledWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIViewHelpMenuItem;
            WinButton uICloseButton = this.UISpreadsheetuntitledWindow.UISpreadsheetuntitledTitleBar.UICloseButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(3, 12));

            // Click 'Help' -> 'View Help' menu item
            Mouse.Click(uIViewHelpMenuItem, new Point(40, 7));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 9));
        }
        
        /// <summary>
        /// Checks for proper cell selection when app launches.
        /// </summary>
        public void InitialSelection()
        {
            #region Variable Declarations
            WinText uIC4Text = this.UISpreadsheetuntitledWindow.UIA1Window.UIC4Text;
            #endregion

            // Verify that the 'DisplayText' property of 'C4' label equals 'C4'
            Assert.AreEqual(this.InitialSelectionExpectedValues.UIC4TextDisplayText, uIC4Text.DisplayText, "Initial selection should be C4.");
        }
        
        /// <summary>
        /// Opens the application and inputs a collection of data. Last element of the data contains a formula with a single unknown variable (B1).
        /// </summary>
        public void OpenDataInput1()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UISpreadsheetGUIWindow.UIItemWindow.UISpreadsheetGUIexeShoListItem.UINameEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetuntitledWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextContentsEdit = this.UISpreadsheetuntitledWindow.UITextContentsWindow.UITextContentsEdit;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(57, 7));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(83, 36));

            // Type '1' in 'TextContents' text box
            uITextContentsEdit.Text = this.OpenDataInput1Params.UITextContentsEditText;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.OpenDataInput1Params.UITextContentsEditSendKeys, ModifierKeys.None);

            // Type '2' in 'TextContents' text box
            uITextContentsEdit.Text = this.OpenDataInput1Params.UITextContentsEditText1;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.OpenDataInput1Params.UITextContentsEditSendKeys1, ModifierKeys.None);

            // Type '3' in 'TextContents' text box
            uITextContentsEdit.Text = this.OpenDataInput1Params.UITextContentsEditText2;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.OpenDataInput1Params.UITextContentsEditSendKeys2, ModifierKeys.None);

            // Type '4' in 'TextContents' text box
            uITextContentsEdit.Text = this.OpenDataInput1Params.UITextContentsEditText3;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.OpenDataInput1Params.UITextContentsEditSendKeys3, ModifierKeys.None);

            // Type '5' in 'TextContents' text box
            uITextContentsEdit.Text = this.OpenDataInput1Params.UITextContentsEditText4;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.OpenDataInput1Params.UITextContentsEditSendKeys4, ModifierKeys.None);

            // Type '6' in 'TextContents' text box
            uITextContentsEdit.Text = this.OpenDataInput1Params.UITextContentsEditText5;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.OpenDataInput1Params.UITextContentsEditSendKeys5, ModifierKeys.None);

            // Type '7' in 'TextContents' text box
            uITextContentsEdit.Text = this.OpenDataInput1Params.UITextContentsEditText6;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.OpenDataInput1Params.UITextContentsEditSendKeys6, ModifierKeys.None);

            // Type '8' in 'TextContents' text box
            uITextContentsEdit.Text = this.OpenDataInput1Params.UITextContentsEditText7;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.OpenDataInput1Params.UITextContentsEditSendKeys7, ModifierKeys.None);

            // Type '9' in 'TextContents' text box
            uITextContentsEdit.Text = this.OpenDataInput1Params.UITextContentsEditText8;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.OpenDataInput1Params.UITextContentsEditSendKeys8, ModifierKeys.None);

            // Type '=a1+a2+a3+a4+a5+a6+A7+a8+a9+b1' in 'TextContents' text box
            uITextContentsEdit.Text = this.OpenDataInput1Params.UITextContentsEditText9;

            // Type '{Enter}' in 'TextContents' text box
            Keyboard.SendKeys(uITextContentsEdit, this.OpenDataInput1Params.UITextContentsEditSendKeys9, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(57, 222));
        }
        
        /// <summary>
        /// Saves the current Form.
        /// </summary>
        public void Save1()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UISpreadsheetuntitledWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(74, 8));

            // Select 'UITestRecorder1' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.Save1Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.Save1Params.UIFilenameEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Saves current Form and closes. Closes initial Form exiting the program.
        /// </summary>
        public void SaveClose1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetUITestRecWindow.UISpreadsheetUITestRecTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIWarningUnsavedchangeWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinButton uICloseButton1 = this.UISpreadsheetuntitledWindow.UISpreadsheetuntitledTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(29, 8));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(67, 10));

            // Select 'UITestRecorder2' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveClose1Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.SaveClose1Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(23, 10));
        }
        
        /// <summary>
        /// Opens several Form windows and closes the first opened to the last opened. Application must remain running until last window opened is closed.
        /// </summary>
        public void OpenClose()
        {
            #region Variable Declarations
            WinControl uIItemImage = this.UISpreadsheetGUIWindow.UIItemWindow.UISpreadsheetGUIexeShoListItem.UIItemImage;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetuntitledWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetuntitledWindow1.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client2 = this.UISpreadsheetuntitledWindow2.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client3 = this.UISpreadsheetuntitledWindow3.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client4 = this.UISpreadsheetuntitledWindow4.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinButton uICloseButton = this.UISpreadsheetuntitledWindow.UISpreadsheetuntitledTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UISpreadsheetuntitledWindow1.UISpreadsheetuntitledTitleBar.UICloseButton;
            WinButton uICloseButton2 = this.UISpreadsheetuntitledWindow2.UISpreadsheetuntitledTitleBar.UICloseButton;
            WinButton uICloseButton3 = this.UISpreadsheetuntitledWindow3.UISpreadsheetuntitledTitleBar.UICloseButton;
            WinButton uICloseButton4 = this.UISpreadsheetuntitledWindow4.UISpreadsheetuntitledTitleBar.UICloseButton;
            #endregion

            // Double-Click image
            Mouse.DoubleClick(uIItemImage, new Point(14, 9));

            // Type 'Control + n' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.OpenCloseParams.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.Control);

            // Type 'Control + n' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.OpenCloseParams.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.Control);

            // Type 'Control + n' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client2, this.OpenCloseParams.UISpreadsheetPanel1ClientSendKeys2, ModifierKeys.Control);

            // Type 'Control + n' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client3, this.OpenCloseParams.UISpreadsheetPanel1ClientSendKeys3, ModifierKeys.Control);

            // Type 'Control + n' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client4, this.OpenCloseParams.UISpreadsheetPanel1ClientSendKeys4, ModifierKeys.Control);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 13));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(18, 7));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(21, 7));

            // Click 'Close' button
            Mouse.Click(uICloseButton3, new Point(13, 6));

            // Click 'Close' button
            Mouse.Click(uICloseButton4, new Point(20, 11));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(16, 7));
        }
        
        #region Properties
        public virtual CellSelection1ExpectedValues CellSelection1ExpectedValues
        {
            get
            {
                if ((this.mCellSelection1ExpectedValues == null))
                {
                    this.mCellSelection1ExpectedValues = new CellSelection1ExpectedValues();
                }
                return this.mCellSelection1ExpectedValues;
            }
        }
        
        public virtual CellSelection10ExpectedValues CellSelection10ExpectedValues
        {
            get
            {
                if ((this.mCellSelection10ExpectedValues == null))
                {
                    this.mCellSelection10ExpectedValues = new CellSelection10ExpectedValues();
                }
                return this.mCellSelection10ExpectedValues;
            }
        }
        
        public virtual CellSelection11ExpectedValues CellSelection11ExpectedValues
        {
            get
            {
                if ((this.mCellSelection11ExpectedValues == null))
                {
                    this.mCellSelection11ExpectedValues = new CellSelection11ExpectedValues();
                }
                return this.mCellSelection11ExpectedValues;
            }
        }
        
        public virtual CellSelection2ExpectedValues CellSelection2ExpectedValues
        {
            get
            {
                if ((this.mCellSelection2ExpectedValues == null))
                {
                    this.mCellSelection2ExpectedValues = new CellSelection2ExpectedValues();
                }
                return this.mCellSelection2ExpectedValues;
            }
        }
        
        public virtual CellSelection3ExpectedValues CellSelection3ExpectedValues
        {
            get
            {
                if ((this.mCellSelection3ExpectedValues == null))
                {
                    this.mCellSelection3ExpectedValues = new CellSelection3ExpectedValues();
                }
                return this.mCellSelection3ExpectedValues;
            }
        }
        
        public virtual CellSelection4ExpectedValues CellSelection4ExpectedValues
        {
            get
            {
                if ((this.mCellSelection4ExpectedValues == null))
                {
                    this.mCellSelection4ExpectedValues = new CellSelection4ExpectedValues();
                }
                return this.mCellSelection4ExpectedValues;
            }
        }
        
        public virtual CellSelection5ExpectedValues CellSelection5ExpectedValues
        {
            get
            {
                if ((this.mCellSelection5ExpectedValues == null))
                {
                    this.mCellSelection5ExpectedValues = new CellSelection5ExpectedValues();
                }
                return this.mCellSelection5ExpectedValues;
            }
        }
        
        public virtual CellSelection6ExpectedValues CellSelection6ExpectedValues
        {
            get
            {
                if ((this.mCellSelection6ExpectedValues == null))
                {
                    this.mCellSelection6ExpectedValues = new CellSelection6ExpectedValues();
                }
                return this.mCellSelection6ExpectedValues;
            }
        }
        
        public virtual CellSelection7ExpectedValues CellSelection7ExpectedValues
        {
            get
            {
                if ((this.mCellSelection7ExpectedValues == null))
                {
                    this.mCellSelection7ExpectedValues = new CellSelection7ExpectedValues();
                }
                return this.mCellSelection7ExpectedValues;
            }
        }
        
        public virtual CellSelection8ExpectedValues CellSelection8ExpectedValues
        {
            get
            {
                if ((this.mCellSelection8ExpectedValues == null))
                {
                    this.mCellSelection8ExpectedValues = new CellSelection8ExpectedValues();
                }
                return this.mCellSelection8ExpectedValues;
            }
        }
        
        public virtual CellSelection9ExpectedValues CellSelection9ExpectedValues
        {
            get
            {
                if ((this.mCellSelection9ExpectedValues == null))
                {
                    this.mCellSelection9ExpectedValues = new CellSelection9ExpectedValues();
                }
                return this.mCellSelection9ExpectedValues;
            }
        }
        
        public virtual Circular1Params Circular1Params
        {
            get
            {
                if ((this.mCircular1Params == null))
                {
                    this.mCircular1Params = new Circular1Params();
                }
                return this.mCircular1Params;
            }
        }
        
        public virtual Circular2ExpectedValues Circular2ExpectedValues
        {
            get
            {
                if ((this.mCircular2ExpectedValues == null))
                {
                    this.mCircular2ExpectedValues = new Circular2ExpectedValues();
                }
                return this.mCircular2ExpectedValues;
            }
        }
        
        public virtual Circular3Params Circular3Params
        {
            get
            {
                if ((this.mCircular3Params == null))
                {
                    this.mCircular3Params = new Circular3Params();
                }
                return this.mCircular3Params;
            }
        }
        
        public virtual Circular4ExpectedValues Circular4ExpectedValues
        {
            get
            {
                if ((this.mCircular4ExpectedValues == null))
                {
                    this.mCircular4ExpectedValues = new Circular4ExpectedValues();
                }
                return this.mCircular4ExpectedValues;
            }
        }
        
        public virtual DataInput1Params DataInput1Params
        {
            get
            {
                if ((this.mDataInput1Params == null))
                {
                    this.mDataInput1Params = new DataInput1Params();
                }
                return this.mDataInput1Params;
            }
        }
        
        public virtual DataInput10Params DataInput10Params
        {
            get
            {
                if ((this.mDataInput10Params == null))
                {
                    this.mDataInput10Params = new DataInput10Params();
                }
                return this.mDataInput10Params;
            }
        }
        
        public virtual DataInput2Params DataInput2Params
        {
            get
            {
                if ((this.mDataInput2Params == null))
                {
                    this.mDataInput2Params = new DataInput2Params();
                }
                return this.mDataInput2Params;
            }
        }
        
        public virtual DataInput3Params DataInput3Params
        {
            get
            {
                if ((this.mDataInput3Params == null))
                {
                    this.mDataInput3Params = new DataInput3Params();
                }
                return this.mDataInput3Params;
            }
        }
        
        public virtual DataInput4Params DataInput4Params
        {
            get
            {
                if ((this.mDataInput4Params == null))
                {
                    this.mDataInput4Params = new DataInput4Params();
                }
                return this.mDataInput4Params;
            }
        }
        
        public virtual DataInput5Params DataInput5Params
        {
            get
            {
                if ((this.mDataInput5Params == null))
                {
                    this.mDataInput5Params = new DataInput5Params();
                }
                return this.mDataInput5Params;
            }
        }
        
        public virtual DataInput6Params DataInput6Params
        {
            get
            {
                if ((this.mDataInput6Params == null))
                {
                    this.mDataInput6Params = new DataInput6Params();
                }
                return this.mDataInput6Params;
            }
        }
        
        public virtual DataInput7Params DataInput7Params
        {
            get
            {
                if ((this.mDataInput7Params == null))
                {
                    this.mDataInput7Params = new DataInput7Params();
                }
                return this.mDataInput7Params;
            }
        }
        
        public virtual DataInput8Params DataInput8Params
        {
            get
            {
                if ((this.mDataInput8Params == null))
                {
                    this.mDataInput8Params = new DataInput8Params();
                }
                return this.mDataInput8Params;
            }
        }
        
        public virtual DataInput9Params DataInput9Params
        {
            get
            {
                if ((this.mDataInput9Params == null))
                {
                    this.mDataInput9Params = new DataInput9Params();
                }
                return this.mDataInput9Params;
            }
        }
        
        public virtual FormulaError1ExpectedValues FormulaError1ExpectedValues
        {
            get
            {
                if ((this.mFormulaError1ExpectedValues == null))
                {
                    this.mFormulaError1ExpectedValues = new FormulaError1ExpectedValues();
                }
                return this.mFormulaError1ExpectedValues;
            }
        }
        
        public virtual FormulaError10ExpectedValues FormulaError10ExpectedValues
        {
            get
            {
                if ((this.mFormulaError10ExpectedValues == null))
                {
                    this.mFormulaError10ExpectedValues = new FormulaError10ExpectedValues();
                }
                return this.mFormulaError10ExpectedValues;
            }
        }
        
        public virtual FormulaError11ExpectedValues FormulaError11ExpectedValues
        {
            get
            {
                if ((this.mFormulaError11ExpectedValues == null))
                {
                    this.mFormulaError11ExpectedValues = new FormulaError11ExpectedValues();
                }
                return this.mFormulaError11ExpectedValues;
            }
        }
        
        public virtual FormulaError2ExpectedValues FormulaError2ExpectedValues
        {
            get
            {
                if ((this.mFormulaError2ExpectedValues == null))
                {
                    this.mFormulaError2ExpectedValues = new FormulaError2ExpectedValues();
                }
                return this.mFormulaError2ExpectedValues;
            }
        }
        
        public virtual FormulaError3ExpectedValues FormulaError3ExpectedValues
        {
            get
            {
                if ((this.mFormulaError3ExpectedValues == null))
                {
                    this.mFormulaError3ExpectedValues = new FormulaError3ExpectedValues();
                }
                return this.mFormulaError3ExpectedValues;
            }
        }
        
        public virtual FormulaError4ExpectedValues FormulaError4ExpectedValues
        {
            get
            {
                if ((this.mFormulaError4ExpectedValues == null))
                {
                    this.mFormulaError4ExpectedValues = new FormulaError4ExpectedValues();
                }
                return this.mFormulaError4ExpectedValues;
            }
        }
        
        public virtual FormulaError5ExpectedValues FormulaError5ExpectedValues
        {
            get
            {
                if ((this.mFormulaError5ExpectedValues == null))
                {
                    this.mFormulaError5ExpectedValues = new FormulaError5ExpectedValues();
                }
                return this.mFormulaError5ExpectedValues;
            }
        }
        
        public virtual FormulaError6ExpectedValues FormulaError6ExpectedValues
        {
            get
            {
                if ((this.mFormulaError6ExpectedValues == null))
                {
                    this.mFormulaError6ExpectedValues = new FormulaError6ExpectedValues();
                }
                return this.mFormulaError6ExpectedValues;
            }
        }
        
        public virtual FormulaError7ExpectedValues FormulaError7ExpectedValues
        {
            get
            {
                if ((this.mFormulaError7ExpectedValues == null))
                {
                    this.mFormulaError7ExpectedValues = new FormulaError7ExpectedValues();
                }
                return this.mFormulaError7ExpectedValues;
            }
        }
        
        public virtual FormulaError8ExpectedValues FormulaError8ExpectedValues
        {
            get
            {
                if ((this.mFormulaError8ExpectedValues == null))
                {
                    this.mFormulaError8ExpectedValues = new FormulaError8ExpectedValues();
                }
                return this.mFormulaError8ExpectedValues;
            }
        }
        
        public virtual FormulaError9ExpectedValues FormulaError9ExpectedValues
        {
            get
            {
                if ((this.mFormulaError9ExpectedValues == null))
                {
                    this.mFormulaError9ExpectedValues = new FormulaError9ExpectedValues();
                }
                return this.mFormulaError9ExpectedValues;
            }
        }
        
        public virtual InitialSelectionExpectedValues InitialSelectionExpectedValues
        {
            get
            {
                if ((this.mInitialSelectionExpectedValues == null))
                {
                    this.mInitialSelectionExpectedValues = new InitialSelectionExpectedValues();
                }
                return this.mInitialSelectionExpectedValues;
            }
        }
        
        public virtual OpenDataInput1Params OpenDataInput1Params
        {
            get
            {
                if ((this.mOpenDataInput1Params == null))
                {
                    this.mOpenDataInput1Params = new OpenDataInput1Params();
                }
                return this.mOpenDataInput1Params;
            }
        }
        
        public virtual Save1Params Save1Params
        {
            get
            {
                if ((this.mSave1Params == null))
                {
                    this.mSave1Params = new Save1Params();
                }
                return this.mSave1Params;
            }
        }
        
        public virtual SaveClose1Params SaveClose1Params
        {
            get
            {
                if ((this.mSaveClose1Params == null))
                {
                    this.mSaveClose1Params = new SaveClose1Params();
                }
                return this.mSaveClose1Params;
            }
        }
        
        public virtual OpenCloseParams OpenCloseParams
        {
            get
            {
                if ((this.mOpenCloseParams == null))
                {
                    this.mOpenCloseParams = new OpenCloseParams();
                }
                return this.mOpenCloseParams;
            }
        }
        
        public UISpreadsheetuntitledWindow UISpreadsheetuntitledWindow
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow == null))
                {
                    this.mUISpreadsheetuntitledWindow = new UISpreadsheetuntitledWindow();
                }
                return this.mUISpreadsheetuntitledWindow;
            }
        }
        
        public UIErrorInputIsNotAValiWindow UIErrorInputIsNotAValiWindow
        {
            get
            {
                if ((this.mUIErrorInputIsNotAValiWindow == null))
                {
                    this.mUIErrorInputIsNotAValiWindow = new UIErrorInputIsNotAValiWindow();
                }
                return this.mUIErrorInputIsNotAValiWindow;
            }
        }
        
        public UISpreadsheetGUIWindow UISpreadsheetGUIWindow
        {
            get
            {
                if ((this.mUISpreadsheetGUIWindow == null))
                {
                    this.mUISpreadsheetGUIWindow = new UISpreadsheetGUIWindow();
                }
                return this.mUISpreadsheetGUIWindow;
            }
        }
        
        public UIWarningUnsavedchangeWindow UIWarningUnsavedchangeWindow
        {
            get
            {
                if ((this.mUIWarningUnsavedchangeWindow == null))
                {
                    this.mUIWarningUnsavedchangeWindow = new UIWarningUnsavedchangeWindow();
                }
                return this.mUIWarningUnsavedchangeWindow;
            }
        }
        
        public UITheFollowingCellsHavWindow UITheFollowingCellsHavWindow
        {
            get
            {
                if ((this.mUITheFollowingCellsHavWindow == null))
                {
                    this.mUITheFollowingCellsHavWindow = new UITheFollowingCellsHavWindow();
                }
                return this.mUITheFollowingCellsHavWindow;
            }
        }
        
        public UIB3sDependentsAreTheFWindow UIB3sDependentsAreTheFWindow
        {
            get
            {
                if ((this.mUIB3sDependentsAreTheFWindow == null))
                {
                    this.mUIB3sDependentsAreTheFWindow = new UIB3sDependentsAreTheFWindow();
                }
                return this.mUIB3sDependentsAreTheFWindow;
            }
        }
        
        public UIB4sDependentsAreTheFWindow UIB4sDependentsAreTheFWindow
        {
            get
            {
                if ((this.mUIB4sDependentsAreTheFWindow == null))
                {
                    this.mUIB4sDependentsAreTheFWindow = new UIB4sDependentsAreTheFWindow();
                }
                return this.mUIB4sDependentsAreTheFWindow;
            }
        }
        
        public UIC4sDependentsAreTheFWindow UIC4sDependentsAreTheFWindow
        {
            get
            {
                if ((this.mUIC4sDependentsAreTheFWindow == null))
                {
                    this.mUIC4sDependentsAreTheFWindow = new UIC4sDependentsAreTheFWindow();
                }
                return this.mUIC4sDependentsAreTheFWindow;
            }
        }
        
        public UID4sDependentsAreTheFWindow UID4sDependentsAreTheFWindow
        {
            get
            {
                if ((this.mUID4sDependentsAreTheFWindow == null))
                {
                    this.mUID4sDependentsAreTheFWindow = new UID4sDependentsAreTheFWindow();
                }
                return this.mUID4sDependentsAreTheFWindow;
            }
        }
        
        public UIB5sDependentsAreTheFWindow UIB5sDependentsAreTheFWindow
        {
            get
            {
                if ((this.mUIB5sDependentsAreTheFWindow == null))
                {
                    this.mUIB5sDependentsAreTheFWindow = new UIB5sDependentsAreTheFWindow();
                }
                return this.mUIB5sDependentsAreTheFWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UISpreadsheetUIOpenTesWindow UISpreadsheetUIOpenTesWindow
        {
            get
            {
                if ((this.mUISpreadsheetUIOpenTesWindow == null))
                {
                    this.mUISpreadsheetUIOpenTesWindow = new UISpreadsheetUIOpenTesWindow();
                }
                return this.mUISpreadsheetUIOpenTesWindow;
            }
        }
        
        public UISpreadsheetUITestRecWindow UISpreadsheetUITestRecWindow
        {
            get
            {
                if ((this.mUISpreadsheetUITestRecWindow == null))
                {
                    this.mUISpreadsheetUITestRecWindow = new UISpreadsheetUITestRecWindow();
                }
                return this.mUISpreadsheetUITestRecWindow;
            }
        }
        
        public UIB10sDependentsAreTheWindow UIB10sDependentsAreTheWindow
        {
            get
            {
                if ((this.mUIB10sDependentsAreTheWindow == null))
                {
                    this.mUIB10sDependentsAreTheWindow = new UIB10sDependentsAreTheWindow();
                }
                return this.mUIB10sDependentsAreTheWindow;
            }
        }
        
        public UIA1sDependentsAreTheFWindow UIA1sDependentsAreTheFWindow
        {
            get
            {
                if ((this.mUIA1sDependentsAreTheFWindow == null))
                {
                    this.mUIA1sDependentsAreTheFWindow = new UIA1sDependentsAreTheFWindow();
                }
                return this.mUIA1sDependentsAreTheFWindow;
            }
        }
        
        public UISpreadsheetUITestRecWindow1 UISpreadsheetUITestRecWindow1
        {
            get
            {
                if ((this.mUISpreadsheetUITestRecWindow1 == null))
                {
                    this.mUISpreadsheetUITestRecWindow1 = new UISpreadsheetUITestRecWindow1();
                }
                return this.mUISpreadsheetUITestRecWindow1;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UISpreadsheetUITestRecWindow2 UISpreadsheetUITestRecWindow2
        {
            get
            {
                if ((this.mUISpreadsheetUITestRecWindow2 == null))
                {
                    this.mUISpreadsheetUITestRecWindow2 = new UISpreadsheetUITestRecWindow2();
                }
                return this.mUISpreadsheetUITestRecWindow2;
            }
        }
        
        public UISpreadsheetuntitledWindow1 UISpreadsheetuntitledWindow1
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow1 == null))
                {
                    this.mUISpreadsheetuntitledWindow1 = new UISpreadsheetuntitledWindow1();
                }
                return this.mUISpreadsheetuntitledWindow1;
            }
        }
        
        public UISpreadsheetuntitledWindow2 UISpreadsheetuntitledWindow2
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow2 == null))
                {
                    this.mUISpreadsheetuntitledWindow2 = new UISpreadsheetuntitledWindow2();
                }
                return this.mUISpreadsheetuntitledWindow2;
            }
        }
        
        public UISpreadsheetuntitledWindow3 UISpreadsheetuntitledWindow3
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow3 == null))
                {
                    this.mUISpreadsheetuntitledWindow3 = new UISpreadsheetuntitledWindow3();
                }
                return this.mUISpreadsheetuntitledWindow3;
            }
        }
        
        public UISpreadsheetuntitledWindow4 UISpreadsheetuntitledWindow4
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow4 == null))
                {
                    this.mUISpreadsheetuntitledWindow4 = new UISpreadsheetuntitledWindow4();
                }
                return this.mUISpreadsheetuntitledWindow4;
            }
        }
        
        public UISpreadsheetuntitledWindow5 UISpreadsheetuntitledWindow5
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow5 == null))
                {
                    this.mUISpreadsheetuntitledWindow5 = new UISpreadsheetuntitledWindow5();
                }
                return this.mUISpreadsheetuntitledWindow5;
            }
        }
        
        public UISpreadsheetuntitledWindow6 UISpreadsheetuntitledWindow6
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow6 == null))
                {
                    this.mUISpreadsheetuntitledWindow6 = new UISpreadsheetuntitledWindow6();
                }
                return this.mUISpreadsheetuntitledWindow6;
            }
        }
        
        public UISpreadsheetuntitledWindow7 UISpreadsheetuntitledWindow7
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow7 == null))
                {
                    this.mUISpreadsheetuntitledWindow7 = new UISpreadsheetuntitledWindow7();
                }
                return this.mUISpreadsheetuntitledWindow7;
            }
        }
        
        public UISpreadsheetuntitledWindow8 UISpreadsheetuntitledWindow8
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow8 == null))
                {
                    this.mUISpreadsheetuntitledWindow8 = new UISpreadsheetuntitledWindow8();
                }
                return this.mUISpreadsheetuntitledWindow8;
            }
        }
        
        public UISpreadsheetuntitledWindow9 UISpreadsheetuntitledWindow9
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow9 == null))
                {
                    this.mUISpreadsheetuntitledWindow9 = new UISpreadsheetuntitledWindow9();
                }
                return this.mUISpreadsheetuntitledWindow9;
            }
        }
        
        public UISpreadsheetuntitledWindow10 UISpreadsheetuntitledWindow10
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow10 == null))
                {
                    this.mUISpreadsheetuntitledWindow10 = new UISpreadsheetuntitledWindow10();
                }
                return this.mUISpreadsheetuntitledWindow10;
            }
        }
        
        public UISpreadsheetuntitledWindow11 UISpreadsheetuntitledWindow11
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow11 == null))
                {
                    this.mUISpreadsheetuntitledWindow11 = new UISpreadsheetuntitledWindow11();
                }
                return this.mUISpreadsheetuntitledWindow11;
            }
        }
        
        public UISpreadsheetuntitledWindow12 UISpreadsheetuntitledWindow12
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow12 == null))
                {
                    this.mUISpreadsheetuntitledWindow12 = new UISpreadsheetuntitledWindow12();
                }
                return this.mUISpreadsheetuntitledWindow12;
            }
        }
        
        public UISpreadsheetuntitledWindow13 UISpreadsheetuntitledWindow13
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow13 == null))
                {
                    this.mUISpreadsheetuntitledWindow13 = new UISpreadsheetuntitledWindow13();
                }
                return this.mUISpreadsheetuntitledWindow13;
            }
        }
        
        public UISpreadsheetuntitledWindow14 UISpreadsheetuntitledWindow14
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow14 == null))
                {
                    this.mUISpreadsheetuntitledWindow14 = new UISpreadsheetuntitledWindow14();
                }
                return this.mUISpreadsheetuntitledWindow14;
            }
        }
        
        public UISpreadsheetuntitledWindow15 UISpreadsheetuntitledWindow15
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow15 == null))
                {
                    this.mUISpreadsheetuntitledWindow15 = new UISpreadsheetuntitledWindow15();
                }
                return this.mUISpreadsheetuntitledWindow15;
            }
        }
        
        public UISpreadsheetuntitledWindow16 UISpreadsheetuntitledWindow16
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow16 == null))
                {
                    this.mUISpreadsheetuntitledWindow16 = new UISpreadsheetuntitledWindow16();
                }
                return this.mUISpreadsheetuntitledWindow16;
            }
        }
        
        public UISpreadsheetuntitledWindow17 UISpreadsheetuntitledWindow17
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow17 == null))
                {
                    this.mUISpreadsheetuntitledWindow17 = new UISpreadsheetuntitledWindow17();
                }
                return this.mUISpreadsheetuntitledWindow17;
            }
        }
        
        public UISpreadsheetuntitledWindow18 UISpreadsheetuntitledWindow18
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow18 == null))
                {
                    this.mUISpreadsheetuntitledWindow18 = new UISpreadsheetuntitledWindow18();
                }
                return this.mUISpreadsheetuntitledWindow18;
            }
        }
        
        public UISpreadsheetuntitledWindow19 UISpreadsheetuntitledWindow19
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow19 == null))
                {
                    this.mUISpreadsheetuntitledWindow19 = new UISpreadsheetuntitledWindow19();
                }
                return this.mUISpreadsheetuntitledWindow19;
            }
        }
        
        public UISpreadsheetuntitledWindow20 UISpreadsheetuntitledWindow20
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow20 == null))
                {
                    this.mUISpreadsheetuntitledWindow20 = new UISpreadsheetuntitledWindow20();
                }
                return this.mUISpreadsheetuntitledWindow20;
            }
        }
        
        public UISpreadsheetuntitledWindow21 UISpreadsheetuntitledWindow21
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow21 == null))
                {
                    this.mUISpreadsheetuntitledWindow21 = new UISpreadsheetuntitledWindow21();
                }
                return this.mUISpreadsheetuntitledWindow21;
            }
        }
        
        public UISpreadsheetuntitledWindow22 UISpreadsheetuntitledWindow22
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow22 == null))
                {
                    this.mUISpreadsheetuntitledWindow22 = new UISpreadsheetuntitledWindow22();
                }
                return this.mUISpreadsheetuntitledWindow22;
            }
        }
        
        public UISpreadsheetuntitledWindow23 UISpreadsheetuntitledWindow23
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow23 == null))
                {
                    this.mUISpreadsheetuntitledWindow23 = new UISpreadsheetuntitledWindow23();
                }
                return this.mUISpreadsheetuntitledWindow23;
            }
        }
        
        public UISpreadsheetuntitledWindow24 UISpreadsheetuntitledWindow24
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow24 == null))
                {
                    this.mUISpreadsheetuntitledWindow24 = new UISpreadsheetuntitledWindow24();
                }
                return this.mUISpreadsheetuntitledWindow24;
            }
        }
        
        public UISpreadsheetuntitledWindow25 UISpreadsheetuntitledWindow25
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow25 == null))
                {
                    this.mUISpreadsheetuntitledWindow25 = new UISpreadsheetuntitledWindow25();
                }
                return this.mUISpreadsheetuntitledWindow25;
            }
        }
        
        public UISpreadsheetuntitledWindow26 UISpreadsheetuntitledWindow26
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow26 == null))
                {
                    this.mUISpreadsheetuntitledWindow26 = new UISpreadsheetuntitledWindow26();
                }
                return this.mUISpreadsheetuntitledWindow26;
            }
        }
        
        public UISpreadsheetuntitledWindow27 UISpreadsheetuntitledWindow27
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow27 == null))
                {
                    this.mUISpreadsheetuntitledWindow27 = new UISpreadsheetuntitledWindow27();
                }
                return this.mUISpreadsheetuntitledWindow27;
            }
        }
        
        public UISpreadsheetuntitledWindow28 UISpreadsheetuntitledWindow28
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow28 == null))
                {
                    this.mUISpreadsheetuntitledWindow28 = new UISpreadsheetuntitledWindow28();
                }
                return this.mUISpreadsheetuntitledWindow28;
            }
        }
        
        public UISpreadsheetuntitledWindow29 UISpreadsheetuntitledWindow29
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow29 == null))
                {
                    this.mUISpreadsheetuntitledWindow29 = new UISpreadsheetuntitledWindow29();
                }
                return this.mUISpreadsheetuntitledWindow29;
            }
        }
        
        public UISpreadsheetuntitledWindow30 UISpreadsheetuntitledWindow30
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow30 == null))
                {
                    this.mUISpreadsheetuntitledWindow30 = new UISpreadsheetuntitledWindow30();
                }
                return this.mUISpreadsheetuntitledWindow30;
            }
        }
        
        public UISpreadsheetuntitledWindow31 UISpreadsheetuntitledWindow31
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow31 == null))
                {
                    this.mUISpreadsheetuntitledWindow31 = new UISpreadsheetuntitledWindow31();
                }
                return this.mUISpreadsheetuntitledWindow31;
            }
        }
        
        public UISpreadsheetuntitledWindow32 UISpreadsheetuntitledWindow32
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow32 == null))
                {
                    this.mUISpreadsheetuntitledWindow32 = new UISpreadsheetuntitledWindow32();
                }
                return this.mUISpreadsheetuntitledWindow32;
            }
        }
        
        public UISpreadsheetuntitledWindow33 UISpreadsheetuntitledWindow33
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow33 == null))
                {
                    this.mUISpreadsheetuntitledWindow33 = new UISpreadsheetuntitledWindow33();
                }
                return this.mUISpreadsheetuntitledWindow33;
            }
        }
        
        public UISpreadsheetuntitledWindow34 UISpreadsheetuntitledWindow34
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow34 == null))
                {
                    this.mUISpreadsheetuntitledWindow34 = new UISpreadsheetuntitledWindow34();
                }
                return this.mUISpreadsheetuntitledWindow34;
            }
        }
        
        public UISpreadsheetuntitledWindow35 UISpreadsheetuntitledWindow35
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow35 == null))
                {
                    this.mUISpreadsheetuntitledWindow35 = new UISpreadsheetuntitledWindow35();
                }
                return this.mUISpreadsheetuntitledWindow35;
            }
        }
        
        public UISpreadsheetuntitledWindow36 UISpreadsheetuntitledWindow36
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow36 == null))
                {
                    this.mUISpreadsheetuntitledWindow36 = new UISpreadsheetuntitledWindow36();
                }
                return this.mUISpreadsheetuntitledWindow36;
            }
        }
        
        public UISpreadsheetuntitledWindow37 UISpreadsheetuntitledWindow37
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow37 == null))
                {
                    this.mUISpreadsheetuntitledWindow37 = new UISpreadsheetuntitledWindow37();
                }
                return this.mUISpreadsheetuntitledWindow37;
            }
        }
        
        public UISpreadsheetuntitledWindow38 UISpreadsheetuntitledWindow38
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow38 == null))
                {
                    this.mUISpreadsheetuntitledWindow38 = new UISpreadsheetuntitledWindow38();
                }
                return this.mUISpreadsheetuntitledWindow38;
            }
        }
        
        public UISpreadsheetuntitledWindow39 UISpreadsheetuntitledWindow39
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow39 == null))
                {
                    this.mUISpreadsheetuntitledWindow39 = new UISpreadsheetuntitledWindow39();
                }
                return this.mUISpreadsheetuntitledWindow39;
            }
        }
        
        public UISpreadsheetuntitledWindow40 UISpreadsheetuntitledWindow40
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow40 == null))
                {
                    this.mUISpreadsheetuntitledWindow40 = new UISpreadsheetuntitledWindow40();
                }
                return this.mUISpreadsheetuntitledWindow40;
            }
        }
        
        public UISpreadsheetuntitledWindow41 UISpreadsheetuntitledWindow41
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow41 == null))
                {
                    this.mUISpreadsheetuntitledWindow41 = new UISpreadsheetuntitledWindow41();
                }
                return this.mUISpreadsheetuntitledWindow41;
            }
        }
        
        public UIErrorExceptionoftypeWindow UIErrorExceptionoftypeWindow
        {
            get
            {
                if ((this.mUIErrorExceptionoftypeWindow == null))
                {
                    this.mUIErrorExceptionoftypeWindow = new UIErrorExceptionoftypeWindow();
                }
                return this.mUIErrorExceptionoftypeWindow;
            }
        }
        
        public UIA9sDependentsAreTheFWindow UIA9sDependentsAreTheFWindow
        {
            get
            {
                if ((this.mUIA9sDependentsAreTheFWindow == null))
                {
                    this.mUIA9sDependentsAreTheFWindow = new UIA9sDependentsAreTheFWindow();
                }
                return this.mUIA9sDependentsAreTheFWindow;
            }
        }
        
        public UIA5sDependentsAreTheFWindow UIA5sDependentsAreTheFWindow
        {
            get
            {
                if ((this.mUIA5sDependentsAreTheFWindow == null))
                {
                    this.mUIA5sDependentsAreTheFWindow = new UIA5sDependentsAreTheFWindow();
                }
                return this.mUIA5sDependentsAreTheFWindow;
            }
        }
        #endregion
        
        #region Fields
        private CellSelection1ExpectedValues mCellSelection1ExpectedValues;
        
        private CellSelection10ExpectedValues mCellSelection10ExpectedValues;
        
        private CellSelection11ExpectedValues mCellSelection11ExpectedValues;
        
        private CellSelection2ExpectedValues mCellSelection2ExpectedValues;
        
        private CellSelection3ExpectedValues mCellSelection3ExpectedValues;
        
        private CellSelection4ExpectedValues mCellSelection4ExpectedValues;
        
        private CellSelection5ExpectedValues mCellSelection5ExpectedValues;
        
        private CellSelection6ExpectedValues mCellSelection6ExpectedValues;
        
        private CellSelection7ExpectedValues mCellSelection7ExpectedValues;
        
        private CellSelection8ExpectedValues mCellSelection8ExpectedValues;
        
        private CellSelection9ExpectedValues mCellSelection9ExpectedValues;
        
        private Circular1Params mCircular1Params;
        
        private Circular2ExpectedValues mCircular2ExpectedValues;
        
        private Circular3Params mCircular3Params;
        
        private Circular4ExpectedValues mCircular4ExpectedValues;
        
        private DataInput1Params mDataInput1Params;
        
        private DataInput10Params mDataInput10Params;
        
        private DataInput2Params mDataInput2Params;
        
        private DataInput3Params mDataInput3Params;
        
        private DataInput4Params mDataInput4Params;
        
        private DataInput5Params mDataInput5Params;
        
        private DataInput6Params mDataInput6Params;
        
        private DataInput7Params mDataInput7Params;
        
        private DataInput8Params mDataInput8Params;
        
        private DataInput9Params mDataInput9Params;
        
        private FormulaError1ExpectedValues mFormulaError1ExpectedValues;
        
        private FormulaError10ExpectedValues mFormulaError10ExpectedValues;
        
        private FormulaError11ExpectedValues mFormulaError11ExpectedValues;
        
        private FormulaError2ExpectedValues mFormulaError2ExpectedValues;
        
        private FormulaError3ExpectedValues mFormulaError3ExpectedValues;
        
        private FormulaError4ExpectedValues mFormulaError4ExpectedValues;
        
        private FormulaError5ExpectedValues mFormulaError5ExpectedValues;
        
        private FormulaError6ExpectedValues mFormulaError6ExpectedValues;
        
        private FormulaError7ExpectedValues mFormulaError7ExpectedValues;
        
        private FormulaError8ExpectedValues mFormulaError8ExpectedValues;
        
        private FormulaError9ExpectedValues mFormulaError9ExpectedValues;
        
        private InitialSelectionExpectedValues mInitialSelectionExpectedValues;
        
        private OpenDataInput1Params mOpenDataInput1Params;
        
        private Save1Params mSave1Params;
        
        private SaveClose1Params mSaveClose1Params;
        
        private OpenCloseParams mOpenCloseParams;
        
        private UISpreadsheetuntitledWindow mUISpreadsheetuntitledWindow;
        
        private UIErrorInputIsNotAValiWindow mUIErrorInputIsNotAValiWindow;
        
        private UISpreadsheetGUIWindow mUISpreadsheetGUIWindow;
        
        private UIWarningUnsavedchangeWindow mUIWarningUnsavedchangeWindow;
        
        private UITheFollowingCellsHavWindow mUITheFollowingCellsHavWindow;
        
        private UIB3sDependentsAreTheFWindow mUIB3sDependentsAreTheFWindow;
        
        private UIB4sDependentsAreTheFWindow mUIB4sDependentsAreTheFWindow;
        
        private UIC4sDependentsAreTheFWindow mUIC4sDependentsAreTheFWindow;
        
        private UID4sDependentsAreTheFWindow mUID4sDependentsAreTheFWindow;
        
        private UIB5sDependentsAreTheFWindow mUIB5sDependentsAreTheFWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UISpreadsheetUIOpenTesWindow mUISpreadsheetUIOpenTesWindow;
        
        private UISpreadsheetUITestRecWindow mUISpreadsheetUITestRecWindow;
        
        private UIB10sDependentsAreTheWindow mUIB10sDependentsAreTheWindow;
        
        private UIA1sDependentsAreTheFWindow mUIA1sDependentsAreTheFWindow;
        
        private UISpreadsheetUITestRecWindow1 mUISpreadsheetUITestRecWindow1;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UISpreadsheetUITestRecWindow2 mUISpreadsheetUITestRecWindow2;
        
        private UISpreadsheetuntitledWindow1 mUISpreadsheetuntitledWindow1;
        
        private UISpreadsheetuntitledWindow2 mUISpreadsheetuntitledWindow2;
        
        private UISpreadsheetuntitledWindow3 mUISpreadsheetuntitledWindow3;
        
        private UISpreadsheetuntitledWindow4 mUISpreadsheetuntitledWindow4;
        
        private UISpreadsheetuntitledWindow5 mUISpreadsheetuntitledWindow5;
        
        private UISpreadsheetuntitledWindow6 mUISpreadsheetuntitledWindow6;
        
        private UISpreadsheetuntitledWindow7 mUISpreadsheetuntitledWindow7;
        
        private UISpreadsheetuntitledWindow8 mUISpreadsheetuntitledWindow8;
        
        private UISpreadsheetuntitledWindow9 mUISpreadsheetuntitledWindow9;
        
        private UISpreadsheetuntitledWindow10 mUISpreadsheetuntitledWindow10;
        
        private UISpreadsheetuntitledWindow11 mUISpreadsheetuntitledWindow11;
        
        private UISpreadsheetuntitledWindow12 mUISpreadsheetuntitledWindow12;
        
        private UISpreadsheetuntitledWindow13 mUISpreadsheetuntitledWindow13;
        
        private UISpreadsheetuntitledWindow14 mUISpreadsheetuntitledWindow14;
        
        private UISpreadsheetuntitledWindow15 mUISpreadsheetuntitledWindow15;
        
        private UISpreadsheetuntitledWindow16 mUISpreadsheetuntitledWindow16;
        
        private UISpreadsheetuntitledWindow17 mUISpreadsheetuntitledWindow17;
        
        private UISpreadsheetuntitledWindow18 mUISpreadsheetuntitledWindow18;
        
        private UISpreadsheetuntitledWindow19 mUISpreadsheetuntitledWindow19;
        
        private UISpreadsheetuntitledWindow20 mUISpreadsheetuntitledWindow20;
        
        private UISpreadsheetuntitledWindow21 mUISpreadsheetuntitledWindow21;
        
        private UISpreadsheetuntitledWindow22 mUISpreadsheetuntitledWindow22;
        
        private UISpreadsheetuntitledWindow23 mUISpreadsheetuntitledWindow23;
        
        private UISpreadsheetuntitledWindow24 mUISpreadsheetuntitledWindow24;
        
        private UISpreadsheetuntitledWindow25 mUISpreadsheetuntitledWindow25;
        
        private UISpreadsheetuntitledWindow26 mUISpreadsheetuntitledWindow26;
        
        private UISpreadsheetuntitledWindow27 mUISpreadsheetuntitledWindow27;
        
        private UISpreadsheetuntitledWindow28 mUISpreadsheetuntitledWindow28;
        
        private UISpreadsheetuntitledWindow29 mUISpreadsheetuntitledWindow29;
        
        private UISpreadsheetuntitledWindow30 mUISpreadsheetuntitledWindow30;
        
        private UISpreadsheetuntitledWindow31 mUISpreadsheetuntitledWindow31;
        
        private UISpreadsheetuntitledWindow32 mUISpreadsheetuntitledWindow32;
        
        private UISpreadsheetuntitledWindow33 mUISpreadsheetuntitledWindow33;
        
        private UISpreadsheetuntitledWindow34 mUISpreadsheetuntitledWindow34;
        
        private UISpreadsheetuntitledWindow35 mUISpreadsheetuntitledWindow35;
        
        private UISpreadsheetuntitledWindow36 mUISpreadsheetuntitledWindow36;
        
        private UISpreadsheetuntitledWindow37 mUISpreadsheetuntitledWindow37;
        
        private UISpreadsheetuntitledWindow38 mUISpreadsheetuntitledWindow38;
        
        private UISpreadsheetuntitledWindow39 mUISpreadsheetuntitledWindow39;
        
        private UISpreadsheetuntitledWindow40 mUISpreadsheetuntitledWindow40;
        
        private UISpreadsheetuntitledWindow41 mUISpreadsheetuntitledWindow41;
        
        private UIErrorExceptionoftypeWindow mUIErrorExceptionoftypeWindow;
        
        private UIA9sDependentsAreTheFWindow mUIA9sDependentsAreTheFWindow;
        
        private UIA5sDependentsAreTheFWindow mUIA5sDependentsAreTheFWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellSelection1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class CellSelection1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'A3' label equals 'A3'
        /// </summary>
        public string UIA3TextDisplayText = "A3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellSelection10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class CellSelection10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'TextContents' text box equals '=A4/0.123456789'
        /// </summary>
        public string UITextContentsEditText = "=A4/0.123456789";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellSelection11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class CellSelection11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'A5' label equals 'A5'
        /// </summary>
        public string UIA5TextDisplayText = "A5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellSelection2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class CellSelection2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'A3' label equals 'A3'
        /// </summary>
        public string UIA3TextDisplayText = "A3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellSelection3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class CellSelection3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '3' label equals '3'
        /// </summary>
        public string UIItem3TextDisplayText = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellSelection4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class CellSelection4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'TextContents' text box equals '3'
        /// </summary>
        public string UITextContentsEditText = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellSelection5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class CellSelection5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'A10' label equals 'A10'
        /// </summary>
        public string UIA10TextName = "A10";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellSelection6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class CellSelection6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'A10' label equals 'A10'
        /// </summary>
        public string UIA10TextDisplayText = "A10";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellSelection7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class CellSelection7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'A9' label equals 'A9'
        /// </summary>
        public string UIA9TextDisplayText = "A9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellSelection8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class CellSelection8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '3' label equals '3'
        /// </summary>
        public string UIItem3TextDisplayText = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellSelection9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class CellSelection9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '-55598.4005059454' label equals '-55598.4005059454'
        /// </summary>
        public string UIItem555984005059454TextDisplayText = "-55598.4005059454";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Circular1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class Circular1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=a1' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText = "=a1";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Circular2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class Circular2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'A4' label equals ''
        /// </summary>
        public string UIA4TextDisplayText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Circular3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class Circular3Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=A1' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Circular4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class Circular4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'TextContents' text box equals '=A4+1'
        /// </summary>
        public string UITextContentsEditText = "=A4+1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DataInput1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class DataInput1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '4' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText3 = "4";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText4 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '6' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText5 = "6";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type '7' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText6 = "7";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type '8' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText7 = "8";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys7 = "{Enter}";
        
        /// <summary>
        /// Type '9' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText8 = "9";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys8 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DataInput10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class DataInput10Params
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText = "";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DataInput2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class DataInput2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '-33' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText = "-33";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DataInput3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class DataInput3Params
    {
        
        #region Fields
        /// <summary>
        /// Type '337648' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText = "337648";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '-79871' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText1 = "-79871";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '0.132247' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText2 = "0.132247";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '3.78943' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText3 = "3.78943";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '3.14' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText4 = "3.14";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '7984' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText5 = "7984";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type '39965' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText6 = "39965";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type '-784654' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText7 = "-784654";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys7 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+a2*a3/a4-a5*a6/a7+a8' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText8 = "=A1+a2*a3/a4-a5*a6/a7+a8";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys8 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DataInput4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class DataInput4Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'abcdefghijklmnopqrstuvwxyz' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText = "abcdefghijklmnopqrstuvwxyz";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1+A2*A3/A4-A5*A6/A7+A8*b1' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText1 = "=A1+A2*A3/A4-A5*A6/A7+A8*b1";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DataInput5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class DataInput5Params
    {
        
        #region Fields
        /// <summary>
        /// Type '735' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText = "735";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DataInput6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class DataInput6Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello World' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText = "Hello World";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'UITestRecorder3' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "UITestRecorder3";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Goodbye World' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText1 = "Goodbye World";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'This should not have crashed. If so, there is a problem.' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText2 = "This should not have crashed. If so, there is a problem.";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '1' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText3 = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText4 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText5 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type '=a4+a5+a6+b1' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText6 = "=a4+a5+a6+b1";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys6 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DataInput7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class DataInput7Params
    {
        
        #region Fields
        /// <summary>
        /// Type '987456321.123456987' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText = "987456321.123456987";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DataInput8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class DataInput8Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=a1+1' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText1 = "=a1+1";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=a2-90' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText2 = "=a2-90";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '=a3*78' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText3 = "=a3*78";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '=a4/0.123456789' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText4 = "=a4/0.123456789";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '=a5*0.000001' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText5 = "=a5*0.000001";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type '=a6+3.14' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText6 = "=a6+3.14";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type '=a7*0' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText7 = "=a7*0";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys7 = "{Enter}";
        
        /// <summary>
        /// Type '=a9+3' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText8 = "=a9+3";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys8 = "{Enter}";
        
        /// <summary>
        /// Type '=a8+3' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText9 = "=a8+3";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys9 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DataInput9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class DataInput9Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=a2+1' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText = "=a2+1";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=a3+1' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText1 = "=a3+1";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=a4+1' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText2 = "=a4+1";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '=1' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText3 = "=1";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaError1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class FormulaError1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'SpreadsheetUtilities.FormulaError' label equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UISpreadsheetUtilitiesTextDisplayText = "SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaError10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class FormulaError10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '987456327.123457' label equals '987456327.123457'
        /// </summary>
        public string UIItem987456327123457TextDisplayText = "987456327.123457";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaError11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class FormulaError11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '4' label equals '4'
        /// </summary>
        public string UIItem4TextDisplayText = "4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaError2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class FormulaError2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '12' label equals '12'
        /// </summary>
        public string UIItem12TextDisplayText = "12";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaError3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class FormulaError3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'TextContents' text box equals '=A1+A2+A3+A4+A5+A6+A7+A8+A9+B1'
        /// </summary>
        public string UITextContentsEditText = "=A1+A2+A3+A4+A5+A6+A7+A8+A9+B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaError4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class FormulaError4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '-449794.038628359' label equals '-449794.038628359'
        /// </summary>
        public string UIItem449794038628359TextDisplayText = "-449794.038628359";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaError5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class FormulaError5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'TextContents' text box equals '=A1+A2*A3/A4-A5*A6/A7+A8'
        /// </summary>
        public string UITextContentsEditText = "=A1+A2*A3/A4-A5*A6/A7+A8";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaError6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class FormulaError6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'SpreadsheetUtilities.FormulaError' label equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UISpreadsheetUtilitiesTextDisplayText = "SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaError7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class FormulaError7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'SpreadsheetUtilities.FormulaError' label equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UISpreadsheetUtilitiesTextDisplayText = "SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaError8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class FormulaError8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '-576385830.038628' label equals '-576385830.038628'
        /// </summary>
        public string UIItem576385830038628TextDisplayText = "-576385830.038628";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaError9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class FormulaError9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'SpreadsheetUtilities.FormulaError' label equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UISpreadsheetUtilitiesTextDisplayText = "SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InitialSelection'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class InitialSelectionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'C4' label equals 'C4'
        /// </summary>
        public string UIC4TextDisplayText = "C4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenDataInput1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class OpenDataInput1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '4' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText3 = "4";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText4 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '6' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText5 = "6";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type '7' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText6 = "7";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type '8' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText7 = "8";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys7 = "{Enter}";
        
        /// <summary>
        /// Type '9' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText8 = "9";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys8 = "{Enter}";
        
        /// <summary>
        /// Type '=a1+a2+a3+a4+a5+a6+A7+a8+a9+b1' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditText9 = "=a1+a2+a3+a4+a5+a6+A7+a8+a9+b1";
        
        /// <summary>
        /// Type '{Enter}' in 'TextContents' text box
        /// </summary>
        public string UITextContentsEditSendKeys9 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Save1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class Save1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'UITestRecorder1' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "UITestRecorder1";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveClose1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class SaveClose1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'UITestRecorder2' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "UITestRecorder2";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenClose'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class OpenCloseParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + n' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "n";
        
        /// <summary>
        /// Type 'Control + n' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "n";
        
        /// <summary>
        /// Type 'Control + n' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys2 = "n";
        
        /// <summary>
        /// Type 'Control + n' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys3 = "n";
        
        /// <summary>
        /// Type 'Control + n' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys4 = "n";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow : WinWindow
    {
        
        public UISpreadsheetuntitledWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet - untitled");
            this.WindowTitles.Add("Spreadsheet - UITestRecorder0.ss");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIA1Window1 UIA1Window1
        {
            get
            {
                if ((this.mUIA1Window1 == null))
                {
                    this.mUIA1Window1 = new UIA1Window1(this);
                }
                return this.mUIA1Window1;
            }
        }
        
        public UILabelValue2Window UILabelValue2Window
        {
            get
            {
                if ((this.mUILabelValue2Window == null))
                {
                    this.mUILabelValue2Window = new UILabelValue2Window(this);
                }
                return this.mUILabelValue2Window;
            }
        }
        
        public UITextContentsWindow UITextContentsWindow
        {
            get
            {
                if ((this.mUITextContentsWindow == null))
                {
                    this.mUITextContentsWindow = new UITextContentsWindow(this);
                }
                return this.mUITextContentsWindow;
            }
        }
        
        public UISpreadsheetuntitledTitleBar UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        
        public UIStatusStrip1StatusBar UIStatusStrip1StatusBar
        {
            get
            {
                if ((this.mUIStatusStrip1StatusBar == null))
                {
                    this.mUIStatusStrip1StatusBar = new UIStatusStrip1StatusBar(this);
                }
                return this.mUIStatusStrip1StatusBar;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UITableLayoutPanel1Window UITableLayoutPanel1Window
        {
            get
            {
                if ((this.mUITableLayoutPanel1Window == null))
                {
                    this.mUITableLayoutPanel1Window = new UITableLayoutPanel1Window(this);
                }
                return this.mUITableLayoutPanel1Window;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIA1Window mUIA1Window;
        
        private UIA1Window1 mUIA1Window1;
        
        private UILabelValue2Window mUILabelValue2Window;
        
        private UITextContentsWindow mUITextContentsWindow;
        
        private UISpreadsheetuntitledTitleBar mUISpreadsheetuntitledTitleBar;
        
        private UIStatusStrip1StatusBar mUIStatusStrip1StatusBar;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UITableLayoutPanel1Window mUITableLayoutPanel1Window;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "LabelName1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinText UIA1Text
        {
            get
            {
                if ((this.mUIA1Text == null))
                {
                    this.mUIA1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA1Text.SearchProperties[WinText.PropertyNames.Name] = "A1";
                    this.mUIA1Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIA1Text;
            }
        }
        
        public WinText UIC4Text
        {
            get
            {
                if ((this.mUIC4Text == null))
                {
                    this.mUIC4Text = new WinText(this);
                    #region Search Criteria
                    this.mUIC4Text.SearchProperties[WinText.PropertyNames.Name] = "C4";
                    this.mUIC4Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIC4Text;
            }
        }
        
        public WinText UIA3Text
        {
            get
            {
                if ((this.mUIA3Text == null))
                {
                    this.mUIA3Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA3Text.SearchProperties[WinText.PropertyNames.Name] = "A3";
                    this.mUIA3Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIA3Text;
            }
        }
        
        public WinText UIA9Text
        {
            get
            {
                if ((this.mUIA9Text == null))
                {
                    this.mUIA9Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA9Text.SearchProperties[WinText.PropertyNames.Name] = "A9";
                    this.mUIA9Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIA9Text;
            }
        }
        
        public WinText UIA10Text
        {
            get
            {
                if ((this.mUIA10Text == null))
                {
                    this.mUIA10Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA10Text.SearchProperties[WinText.PropertyNames.Name] = "A10";
                    this.mUIA10Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIA10Text;
            }
        }
        
        public WinText UIE9Text
        {
            get
            {
                if ((this.mUIE9Text == null))
                {
                    this.mUIE9Text = new WinText(this);
                    #region Search Criteria
                    this.mUIE9Text.SearchProperties[WinText.PropertyNames.Name] = "E9";
                    this.mUIE9Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIE9Text;
            }
        }
        
        public WinText UIA5Text
        {
            get
            {
                if ((this.mUIA5Text == null))
                {
                    this.mUIA5Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA5Text.SearchProperties[WinText.PropertyNames.Name] = "A5";
                    this.mUIA5Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIA5Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIA1Text;
        
        private WinText mUIC4Text;
        
        private WinText mUIA3Text;
        
        private WinText mUIA9Text;
        
        private WinText mUIA10Text;
        
        private WinText mUIE9Text;
        
        private WinText mUIA5Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIA1Window1 : WinWindow
    {
        
        public UIA1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "LabelName2";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinText UIA1Text
        {
            get
            {
                if ((this.mUIA1Text == null))
                {
                    this.mUIA1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA1Text.SearchProperties[WinText.PropertyNames.Name] = "A1";
                    this.mUIA1Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIA1Text;
            }
        }
        
        public WinText UIA3Text
        {
            get
            {
                if ((this.mUIA3Text == null))
                {
                    this.mUIA3Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA3Text.SearchProperties[WinText.PropertyNames.Name] = "A3";
                    this.mUIA3Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIA3Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIA1Text;
        
        private WinText mUIA3Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UILabelValue2Window : WinWindow
    {
        
        public UILabelValue2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "LabelValue2";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinText UIA1Text
        {
            get
            {
                if ((this.mUIA1Text == null))
                {
                    this.mUIA1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA1Text.SearchProperties[WinText.PropertyNames.Name] = "A1";
                    this.mUIA1Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIA1Text;
            }
        }
        
        public WinText UIItem12345Text
        {
            get
            {
                if ((this.mUIItem12345Text == null))
                {
                    this.mUIItem12345Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem12345Text.SearchProperties[WinText.PropertyNames.Name] = "12345";
                    this.mUIItem12345Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIItem12345Text;
            }
        }
        
        public WinText UIItem15Text
        {
            get
            {
                if ((this.mUIItem15Text == null))
                {
                    this.mUIItem15Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem15Text.SearchProperties[WinText.PropertyNames.Name] = "-15";
                    this.mUIItem15Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIItem15Text;
            }
        }
        
        public WinText UIItem30Text
        {
            get
            {
                if ((this.mUIItem30Text == null))
                {
                    this.mUIItem30Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem30Text.SearchProperties[WinText.PropertyNames.Name] = "-30";
                    this.mUIItem30Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIItem30Text;
            }
        }
        
        public WinText UISpreadsheetUtilitiesText
        {
            get
            {
                if ((this.mUISpreadsheetUtilitiesText == null))
                {
                    this.mUISpreadsheetUtilitiesText = new WinText(this);
                    #region Search Criteria
                    this.mUISpreadsheetUtilitiesText.SearchProperties[WinText.PropertyNames.Name] = "SpreadsheetUtilities.FormulaError";
                    this.mUISpreadsheetUtilitiesText.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetUtilitiesText;
            }
        }
        
        public WinText UIItem3Text
        {
            get
            {
                if ((this.mUIItem3Text == null))
                {
                    this.mUIItem3Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem3Text.SearchProperties[WinText.PropertyNames.Name] = "3";
                    this.mUIItem3Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIItem3Text;
            }
        }
        
        public WinText UIItem13Text
        {
            get
            {
                if ((this.mUIItem13Text == null))
                {
                    this.mUIItem13Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem13Text.SearchProperties[WinText.PropertyNames.Name] = "13";
                    this.mUIItem13Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIItem13Text;
            }
        }
        
        public WinText UIItem49Text
        {
            get
            {
                if ((this.mUIItem49Text == null))
                {
                    this.mUIItem49Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem49Text.SearchProperties[WinText.PropertyNames.Name] = "-49";
                    this.mUIItem49Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIItem49Text;
            }
        }
        
        public WinText UIItem12Text
        {
            get
            {
                if ((this.mUIItem12Text == null))
                {
                    this.mUIItem12Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem12Text.SearchProperties[WinText.PropertyNames.Name] = "12";
                    this.mUIItem12Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIItem12Text;
            }
        }
        
        public WinText UIItem213333333333333Text
        {
            get
            {
                if ((this.mUIItem213333333333333Text == null))
                {
                    this.mUIItem213333333333333Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem213333333333333Text.SearchProperties[WinText.PropertyNames.Name] = "21.3333333333333";
                    this.mUIItem213333333333333Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIItem213333333333333Text;
            }
        }
        
        public WinText UIItem190869565217391Text
        {
            get
            {
                if ((this.mUIItem190869565217391Text == null))
                {
                    this.mUIItem190869565217391Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem190869565217391Text.SearchProperties[WinText.PropertyNames.Name] = "-19.0869565217391";
                    this.mUIItem190869565217391Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIItem190869565217391Text;
            }
        }
        
        public WinText UIItem985990053050398Text
        {
            get
            {
                if ((this.mUIItem985990053050398Text == null))
                {
                    this.mUIItem985990053050398Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem985990053050398Text.SearchProperties[WinText.PropertyNames.Name] = "985.990053050398";
                    this.mUIItem985990053050398Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIItem985990053050398Text;
            }
        }
        
        public WinText UIItem449794038628359Text
        {
            get
            {
                if ((this.mUIItem449794038628359Text == null))
                {
                    this.mUIItem449794038628359Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem449794038628359Text.SearchProperties[WinText.PropertyNames.Name] = "-449794.038628359";
                    this.mUIItem449794038628359Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIItem449794038628359Text;
            }
        }
        
        public WinText UIItem555984005059454Text
        {
            get
            {
                if ((this.mUIItem555984005059454Text == null))
                {
                    this.mUIItem555984005059454Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem555984005059454Text.SearchProperties[WinText.PropertyNames.Name] = "-55598.4005059454";
                    this.mUIItem555984005059454Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIItem555984005059454Text;
            }
        }
        
        public WinText UIItem4Text
        {
            get
            {
                if ((this.mUIItem4Text == null))
                {
                    this.mUIItem4Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem4Text.SearchProperties[WinText.PropertyNames.Name] = "4";
                    this.mUIItem4Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIItem4Text;
            }
        }
        
        public WinText UIA4Text
        {
            get
            {
                if ((this.mUIA4Text == null))
                {
                    this.mUIA4Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA4Text.SearchProperties[WinText.PropertyNames.Name] = "A4";
                    this.mUIA4Text.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIA4Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIA1Text;
        
        private WinText mUIItem12345Text;
        
        private WinText mUIItem15Text;
        
        private WinText mUIItem30Text;
        
        private WinText mUISpreadsheetUtilitiesText;
        
        private WinText mUIItem3Text;
        
        private WinText mUIItem13Text;
        
        private WinText mUIItem49Text;
        
        private WinText mUIItem12Text;
        
        private WinText mUIItem213333333333333Text;
        
        private WinText mUIItem190869565217391Text;
        
        private WinText mUIItem985990053050398Text;
        
        private WinText mUIItem449794038628359Text;
        
        private WinText mUIItem555984005059454Text;
        
        private WinText mUIItem4Text;
        
        private WinText mUIA4Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UITextContentsWindow : WinWindow
    {
        
        public UITextContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TextContents";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextContentsEdit
        {
            get
            {
                if ((this.mUITextContentsEdit == null))
                {
                    this.mUITextContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextContentsEdit.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUITextContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIStatusStrip1StatusBar : WinStatusBar
    {
        
        public UIStatusStrip1StatusBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinStatusBar.PropertyNames.Name] = "statusStrip1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinText UIUntitledText
        {
            get
            {
                if ((this.mUIUntitledText == null))
                {
                    this.mUIUntitledText = new WinText(this);
                    #region Search Criteria
                    this.mUIUntitledText.SearchProperties[WinText.PropertyNames.Name] = "untitled";
                    this.mUIUntitledText.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIUntitledText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIUntitledText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UITableLayoutPanel1Window : WinWindow
    {
        
        public UITableLayoutPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tableLayoutPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinWindow UITextContentsWindow
        {
            get
            {
                if ((this.mUITextContentsWindow == null))
                {
                    this.mUITextContentsWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUITextContentsWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUITextContentsWindow.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUITextContentsWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUITextContentsWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            this.WindowTitles.Add("Spreadsheet - UITestRecorder0.ss");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIOptionsMenuItem UIOptionsMenuItem
        {
            get
            {
                if ((this.mUIOptionsMenuItem == null))
                {
                    this.mUIOptionsMenuItem = new UIOptionsMenuItem(this);
                }
                return this.mUIOptionsMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIOptionsMenuItem mUIOptionsMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet - untitled");
            this.WindowTitles.Add("Spreadsheet - UITestRecorder0.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOptionsMenuItem : WinMenuItem
    {
        
        public UIOptionsMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Options";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIShowAllNegativesMenuItem
        {
            get
            {
                if ((this.mUIShowAllNegativesMenuItem == null))
                {
                    this.mUIShowAllNegativesMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIShowAllNegativesMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Show All Negatives";
                    this.mUIShowAllNegativesMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIShowAllNegativesMenuItem.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIShowAllNegativesMenuItem;
            }
        }
        
        public WinMenuItem UIDisplayDependentsMenuItem
        {
            get
            {
                if ((this.mUIDisplayDependentsMenuItem == null))
                {
                    this.mUIDisplayDependentsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIDisplayDependentsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Display Dependents";
                    this.mUIDisplayDependentsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDisplayDependentsMenuItem.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIDisplayDependentsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIShowAllNegativesMenuItem;
        
        private WinMenuItem mUIDisplayDependentsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIViewHelpMenuItem
        {
            get
            {
                if ((this.mUIViewHelpMenuItem == null))
                {
                    this.mUIViewHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIViewHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "View Help";
                    this.mUIViewHelpMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIViewHelpMenuItem.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIViewHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIViewHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIErrorInputIsNotAValiWindow : WinWindow
    {
        
        public UIErrorInputIsNotAValiWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Error! Input Is Not A Valid Formula.";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Error! Input Is Not A Valid Formula.");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Error! Input Is Not A Valid Formula.");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Error! Input Is Not A Valid Formula.");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetGUIWindow : WinWindow
    {
        
        public UISpreadsheetGUIWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "SpreadsheetGUI";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("SpreadsheetGUI");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetGUITitleBar UISpreadsheetGUITitleBar
        {
            get
            {
                if ((this.mUISpreadsheetGUITitleBar == null))
                {
                    this.mUISpreadsheetGUITitleBar = new UISpreadsheetGUITitleBar(this);
                }
                return this.mUISpreadsheetGUITitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UISpreadsheetGUITitleBar mUISpreadsheetGUITitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("SpreadsheetGUI");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetGUIexeShoListItem UISpreadsheetGUIexeShoListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIexeShoListItem == null))
                {
                    this.mUISpreadsheetGUIexeShoListItem = new UISpreadsheetGUIexeShoListItem(this);
                }
                return this.mUISpreadsheetGUIexeShoListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetGUIexeShoListItem mUISpreadsheetGUIexeShoListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetGUIexeShoListItem : WinListItem
    {
        
        public UISpreadsheetGUIexeShoListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI.exe - Shortcut";
            this.WindowTitles.Add("SpreadsheetGUI");
            #endregion
        }
        
        #region Properties
        public WinControl UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchProperties[UITestControl.PropertyNames.ControlType] = "Image";
                    this.mUIItemImage.WindowTitles.Add("SpreadsheetGUI");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("SpreadsheetGUI");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemImage;
        
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetGUITitleBar : WinTitleBar
    {
        
        public UISpreadsheetGUITitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("SpreadsheetGUI");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("SpreadsheetGUI");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIWarningUnsavedchangeWindow : WinWindow
    {
        
        public UIWarningUnsavedchangeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Warning! Unsaved changes will be lost.";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Warning! Unsaved changes will be lost.");
            #endregion
        }
        
        #region Properties
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow mUICancelWindow;
        
        private UINOWindow mUINOWindow;
        
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Warning! Unsaved changes will be lost.");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Warning! Unsaved changes will be lost.");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Warning! Unsaved changes will be lost.");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Warning! Unsaved changes will be lost.");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Warning! Unsaved changes will be lost.");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Warning! Unsaved changes will be lost.");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UITheFollowingCellsHavWindow : WinWindow
    {
        
        public UITheFollowingCellsHavWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "The Following Cells Have Negative Values:";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("The Following Cells Have Negative Values:");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UITheFollowingCellsHavTitleBar UITheFollowingCellsHavTitleBar
        {
            get
            {
                if ((this.mUITheFollowingCellsHavTitleBar == null))
                {
                    this.mUITheFollowingCellsHavTitleBar = new UITheFollowingCellsHavTitleBar(this);
                }
                return this.mUITheFollowingCellsHavTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        
        private UITheFollowingCellsHavTitleBar mUITheFollowingCellsHavTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("The Following Cells Have Negative Values:");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("The Following Cells Have Negative Values:");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UITheFollowingCellsHavTitleBar : WinTitleBar
    {
        
        public UITheFollowingCellsHavTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("The Following Cells Have Negative Values:");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("The Following Cells Have Negative Values:");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIB3sDependentsAreTheFWindow : WinWindow
    {
        
        public UIB3sDependentsAreTheFWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "B3\'s Dependents Are The Following Cells:";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("B3\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public UIOKWindow2 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow2(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow2 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("B3\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("B3\'s Dependents Are The Following Cells:");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIB4sDependentsAreTheFWindow : WinWindow
    {
        
        public UIB4sDependentsAreTheFWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "B4\'s Dependents Are The Following Cells:";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("B4\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public UIOKWindow3 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow3(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow3 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOKWindow3 : WinWindow
    {
        
        public UIOKWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("B4\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("B4\'s Dependents Are The Following Cells:");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIC4sDependentsAreTheFWindow : WinWindow
    {
        
        public UIC4sDependentsAreTheFWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C4\'s Dependents Are The Following Cells:";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("C4\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public UIOKWindow4 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow4(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow4 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOKWindow4 : WinWindow
    {
        
        public UIOKWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("C4\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("C4\'s Dependents Are The Following Cells:");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UID4sDependentsAreTheFWindow : WinWindow
    {
        
        public UID4sDependentsAreTheFWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "D4\'s Dependents Are The Following Cells:";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("D4\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public UIOKWindow5 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow5(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow5 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOKWindow5 : WinWindow
    {
        
        public UIOKWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("D4\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("D4\'s Dependents Are The Following Cells:");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIB5sDependentsAreTheFWindow : WinWindow
    {
        
        public UIB5sDependentsAreTheFWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "B5\'s Dependents Are The Following Cells:";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("B5\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public UIOKWindow6 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow6(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow6 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOKWindow6 : WinWindow
    {
        
        public UIOKWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("B5\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("B5\'s Dependents Are The Following Cells:");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIUITestRecorder3ssListItem UIUITestRecorder3ssListItem
        {
            get
            {
                if ((this.mUIUITestRecorder3ssListItem == null))
                {
                    this.mUIUITestRecorder3ssListItem = new UIUITestRecorder3ssListItem(this);
                }
                return this.mUIUITestRecorder3ssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUITestRecorder3ssListItem mUIUITestRecorder3ssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIUITestRecorder3ssListItem : WinListItem
    {
        
        public UIUITestRecorder3ssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UITestRecorder3.ss";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIUIOpenTest1ssListItem UIUIOpenTest1ssListItem
        {
            get
            {
                if ((this.mUIUIOpenTest1ssListItem == null))
                {
                    this.mUIUIOpenTest1ssListItem = new UIUIOpenTest1ssListItem(this);
                }
                return this.mUIUIOpenTest1ssListItem;
            }
        }
        
        public UIUITestRecorder1ssListItem UIUITestRecorder1ssListItem
        {
            get
            {
                if ((this.mUIUITestRecorder1ssListItem == null))
                {
                    this.mUIUITestRecorder1ssListItem = new UIUITestRecorder1ssListItem(this);
                }
                return this.mUIUITestRecorder1ssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUIOpenTest1ssListItem mUIUIOpenTest1ssListItem;
        
        private UIUITestRecorder1ssListItem mUIUITestRecorder1ssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIUIOpenTest1ssListItem : WinListItem
    {
        
        public UIUIOpenTest1ssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UIOpenTest1.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIUITestRecorder1ssListItem : WinListItem
    {
        
        public UIUITestRecorder1ssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UITestRecorder1.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetUIOpenTesWindow : WinWindow
    {
        
        public UISpreadsheetUIOpenTesWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - UIOpenTest1.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet - UIOpenTest1.ss");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItem213333333333333Window UIItem213333333333333Window
        {
            get
            {
                if ((this.mUIItem213333333333333Window == null))
                {
                    this.mUIItem213333333333333Window = new UIItem213333333333333Window(this);
                }
                return this.mUIItem213333333333333Window;
            }
        }
        
        public UITextContentsWindow1 UITextContentsWindow
        {
            get
            {
                if ((this.mUITextContentsWindow == null))
                {
                    this.mUITextContentsWindow = new UITextContentsWindow1(this);
                }
                return this.mUITextContentsWindow;
            }
        }
        
        public UISpreadsheetUIOpenTesTitleBar UISpreadsheetUIOpenTesTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetUIOpenTesTitleBar == null))
                {
                    this.mUISpreadsheetUIOpenTesTitleBar = new UISpreadsheetUIOpenTesTitleBar(this);
                }
                return this.mUISpreadsheetUIOpenTesTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        
        private UIItem213333333333333Window mUIItem213333333333333Window;
        
        private UITextContentsWindow1 mUITextContentsWindow;
        
        private UISpreadsheetUIOpenTesTitleBar mUISpreadsheetUIOpenTesTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet - UIOpenTest1.ss");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - UIOpenTest1.ss");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItem213333333333333Window : WinWindow
    {
        
        public UIItem213333333333333Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "LabelValue2";
            this.WindowTitles.Add("Spreadsheet - UIOpenTest1.ss");
            #endregion
        }
        
        #region Properties
        public WinText UIItem213333333333333Text
        {
            get
            {
                if ((this.mUIItem213333333333333Text == null))
                {
                    this.mUIItem213333333333333Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem213333333333333Text.SearchProperties[WinText.PropertyNames.Name] = "21.3333333333333";
                    this.mUIItem213333333333333Text.WindowTitles.Add("Spreadsheet - UIOpenTest1.ss");
                    #endregion
                }
                return this.mUIItem213333333333333Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIItem213333333333333Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UITextContentsWindow1 : WinWindow
    {
        
        public UITextContentsWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TextContents";
            this.WindowTitles.Add("Spreadsheet - UIOpenTest1.ss");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextContentsEdit
        {
            get
            {
                if ((this.mUITextContentsEdit == null))
                {
                    this.mUITextContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextContentsEdit.WindowTitles.Add("Spreadsheet - UIOpenTest1.ss");
                    #endregion
                }
                return this.mUITextContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetUIOpenTesTitleBar : WinTitleBar
    {
        
        public UISpreadsheetUIOpenTesTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - UIOpenTest1.ss");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - UIOpenTest1.ss");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetUITestRecWindow : WinWindow
    {
        
        public UISpreadsheetUITestRecWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - UITestRecorder1.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
            #endregion
        }
        
        #region Properties
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetUtilitiesWindow UISpreadsheetUtilitiesWindow
        {
            get
            {
                if ((this.mUISpreadsheetUtilitiesWindow == null))
                {
                    this.mUISpreadsheetUtilitiesWindow = new UISpreadsheetUtilitiesWindow(this);
                }
                return this.mUISpreadsheetUtilitiesWindow;
            }
        }
        
        public UITextContentsWindow2 UITextContentsWindow
        {
            get
            {
                if ((this.mUITextContentsWindow == null))
                {
                    this.mUITextContentsWindow = new UITextContentsWindow2(this);
                }
                return this.mUITextContentsWindow;
            }
        }
        
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UISpreadsheetUITestRecTitleBar UISpreadsheetUITestRecTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetUITestRecTitleBar == null))
                {
                    this.mUISpreadsheetUITestRecTitleBar = new UISpreadsheetUITestRecTitleBar(this);
                }
                return this.mUISpreadsheetUITestRecTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow5 mUIItemWindow;
        
        private UISpreadsheetUtilitiesWindow mUISpreadsheetUtilitiesWindow;
        
        private UITextContentsWindow2 mUITextContentsWindow;
        
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private UISpreadsheetUITestRecTitleBar mUISpreadsheetUITestRecTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetUtilitiesWindow : WinWindow
    {
        
        public UISpreadsheetUtilitiesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "LabelValue2";
            this.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
            #endregion
        }
        
        #region Properties
        public WinText UISpreadsheetUtilitiesText
        {
            get
            {
                if ((this.mUISpreadsheetUtilitiesText == null))
                {
                    this.mUISpreadsheetUtilitiesText = new WinText(this);
                    #region Search Criteria
                    this.mUISpreadsheetUtilitiesText.SearchProperties[WinText.PropertyNames.Name] = "SpreadsheetUtilities.FormulaError";
                    this.mUISpreadsheetUtilitiesText.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
                    #endregion
                }
                return this.mUISpreadsheetUtilitiesText;
            }
        }
        
        public WinText UIItem799130434782609Text
        {
            get
            {
                if ((this.mUIItem799130434782609Text == null))
                {
                    this.mUIItem799130434782609Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem799130434782609Text.SearchProperties[WinText.PropertyNames.Name] = "79.9130434782609";
                    this.mUIItem799130434782609Text.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
                    #endregion
                }
                return this.mUIItem799130434782609Text;
            }
        }
        
        public WinText UIItem576385830038628Text
        {
            get
            {
                if ((this.mUIItem576385830038628Text == null))
                {
                    this.mUIItem576385830038628Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem576385830038628Text.SearchProperties[WinText.PropertyNames.Name] = "-576385830.038628";
                    this.mUIItem576385830038628Text.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
                    #endregion
                }
                return this.mUIItem576385830038628Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUISpreadsheetUtilitiesText;
        
        private WinText mUIItem799130434782609Text;
        
        private WinText mUIItem576385830038628Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UITextContentsWindow2 : WinWindow
    {
        
        public UITextContentsWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TextContents";
            this.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextContentsEdit
        {
            get
            {
                if ((this.mUITextContentsEdit == null))
                {
                    this.mUITextContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextContentsEdit.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
                    #endregion
                }
                return this.mUITextContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
            #endregion
        }
        
        #region Properties
        public UIOptionsMenuItem1 UIOptionsMenuItem
        {
            get
            {
                if ((this.mUIOptionsMenuItem == null))
                {
                    this.mUIOptionsMenuItem = new UIOptionsMenuItem1(this);
                }
                return this.mUIOptionsMenuItem;
            }
        }
        
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIOptionsMenuItem1 mUIOptionsMenuItem;
        
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOptionsMenuItem1 : WinMenuItem
    {
        
        public UIOptionsMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Options";
            this.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIShowAllNegativesMenuItem
        {
            get
            {
                if ((this.mUIShowAllNegativesMenuItem == null))
                {
                    this.mUIShowAllNegativesMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIShowAllNegativesMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Show All Negatives";
                    this.mUIShowAllNegativesMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIShowAllNegativesMenuItem.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
                    #endregion
                }
                return this.mUIShowAllNegativesMenuItem;
            }
        }
        
        public WinMenuItem UIDisplayDependentsMenuItem
        {
            get
            {
                if ((this.mUIDisplayDependentsMenuItem == null))
                {
                    this.mUIDisplayDependentsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIDisplayDependentsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Display Dependents";
                    this.mUIDisplayDependentsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDisplayDependentsMenuItem.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
                    #endregion
                }
                return this.mUIDisplayDependentsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIShowAllNegativesMenuItem;
        
        private WinMenuItem mUIDisplayDependentsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetUITestRecTitleBar : WinTitleBar
    {
        
        public UISpreadsheetUITestRecTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIB10sDependentsAreTheWindow : WinWindow
    {
        
        public UIB10sDependentsAreTheWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "B10\'s Dependents Are The Following Cells:";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("B10\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public UIOKWindow7 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow7(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow7 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOKWindow7 : WinWindow
    {
        
        public UIOKWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("B10\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("B10\'s Dependents Are The Following Cells:");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIA1sDependentsAreTheFWindow : WinWindow
    {
        
        public UIA1sDependentsAreTheFWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "A1\'s Dependents Are The Following Cells:";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("A1\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public UIOKWindow8 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow8(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow8 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOKWindow8 : WinWindow
    {
        
        public UIOKWindow8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("A1\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("A1\'s Dependents Are The Following Cells:");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetUITestRecWindow1 : WinWindow
    {
        
        public UISpreadsheetUITestRecWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - UITestRecorder1.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
            #endregion
        }
        
        #region Properties
        public UIItemWindow6 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow6(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow6 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - UITestRecorder1.ss");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetUITestRecWindow2 : WinWindow
    {
        
        public UISpreadsheetUITestRecWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - UITestRecorder3.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet - UITestRecorder3.ss");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetUtilitiesWindow1 UISpreadsheetUtilitiesWindow
        {
            get
            {
                if ((this.mUISpreadsheetUtilitiesWindow == null))
                {
                    this.mUISpreadsheetUtilitiesWindow = new UISpreadsheetUtilitiesWindow1(this);
                }
                return this.mUISpreadsheetUtilitiesWindow;
            }
        }
        
        public UIItemWindow7 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow7(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UITextContentsWindow3 UITextContentsWindow
        {
            get
            {
                if ((this.mUITextContentsWindow == null))
                {
                    this.mUITextContentsWindow = new UITextContentsWindow3(this);
                }
                return this.mUITextContentsWindow;
            }
        }
        
        public UISpreadsheetUITestRecTitleBar1 UISpreadsheetUITestRecTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetUITestRecTitleBar == null))
                {
                    this.mUISpreadsheetUITestRecTitleBar = new UISpreadsheetUITestRecTitleBar1(this);
                }
                return this.mUISpreadsheetUITestRecTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetUtilitiesWindow1 mUISpreadsheetUtilitiesWindow;
        
        private UIItemWindow7 mUIItemWindow;
        
        private UITextContentsWindow3 mUITextContentsWindow;
        
        private UISpreadsheetUITestRecTitleBar1 mUISpreadsheetUITestRecTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetUtilitiesWindow1 : WinWindow
    {
        
        public UISpreadsheetUtilitiesWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "LabelValue2";
            this.WindowTitles.Add("Spreadsheet - UITestRecorder3.ss");
            #endregion
        }
        
        #region Properties
        public WinText UISpreadsheetUtilitiesText
        {
            get
            {
                if ((this.mUISpreadsheetUtilitiesText == null))
                {
                    this.mUISpreadsheetUtilitiesText = new WinText(this);
                    #region Search Criteria
                    this.mUISpreadsheetUtilitiesText.SearchProperties[WinText.PropertyNames.Name] = "SpreadsheetUtilities.FormulaError";
                    this.mUISpreadsheetUtilitiesText.WindowTitles.Add("Spreadsheet - UITestRecorder3.ss");
                    #endregion
                }
                return this.mUISpreadsheetUtilitiesText;
            }
        }
        
        public WinText UIItem987456327123457Text
        {
            get
            {
                if ((this.mUIItem987456327123457Text == null))
                {
                    this.mUIItem987456327123457Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem987456327123457Text.SearchProperties[WinText.PropertyNames.Name] = "987456327.123457";
                    this.mUIItem987456327123457Text.WindowTitles.Add("Spreadsheet - UITestRecorder3.ss");
                    #endregion
                }
                return this.mUIItem987456327123457Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUISpreadsheetUtilitiesText;
        
        private WinText mUIItem987456327123457Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet - UITestRecorder3.ss");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - UITestRecorder3.ss");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UITextContentsWindow3 : WinWindow
    {
        
        public UITextContentsWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TextContents";
            this.WindowTitles.Add("Spreadsheet - UITestRecorder3.ss");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextContentsEdit
        {
            get
            {
                if ((this.mUITextContentsEdit == null))
                {
                    this.mUITextContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextContentsEdit.WindowTitles.Add("Spreadsheet - UITestRecorder3.ss");
                    #endregion
                }
                return this.mUITextContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetUITestRecTitleBar1 : WinTitleBar
    {
        
        public UISpreadsheetUITestRecTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - UITestRecorder3.ss");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - UITestRecorder3.ss");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow1 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar2 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar2(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UISpreadsheetuntitledTitleBar1 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar1(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        
        public UISpreadsheetPanel1Window1 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window1(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar2 mUIMenuStrip1MenuBar;
        
        private UISpreadsheetuntitledTitleBar1 mUISpreadsheetuntitledTitleBar;
        
        private UISpreadsheetPanel1Window1 mUISpreadsheetPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMenuStrip1MenuBar2 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem2 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem2(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem2 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIFileMenuItem2 : WinMenuItem
    {
        
        public UIFileMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar1 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window1 : WinWindow
    {
        
        public UISpreadsheetPanel1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow2 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "3";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar3 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar3(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UISpreadsheetuntitledTitleBar2 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar2(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        
        public UISpreadsheetPanel1Window2 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window2(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar3 mUIMenuStrip1MenuBar;
        
        private UISpreadsheetuntitledTitleBar2 mUISpreadsheetuntitledTitleBar;
        
        private UISpreadsheetPanel1Window2 mUISpreadsheetPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMenuStrip1MenuBar3 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem3 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem3(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem3 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIFileMenuItem3 : WinMenuItem
    {
        
        public UIFileMenuItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar2 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window2 : WinWindow
    {
        
        public UISpreadsheetPanel1Window2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow3 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "4";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window3 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window3(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar3 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar3(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window3 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar3 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window3 : WinWindow
    {
        
        public UISpreadsheetPanel1Window3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar3 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow4 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow4()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "5";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window4 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window4(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar4 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar4(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window4 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar4 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window4 : WinWindow
    {
        
        public UISpreadsheetPanel1Window4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar4 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow5 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow5()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "6";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window5 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window5(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar5 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar5(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window5 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar5 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window5 : WinWindow
    {
        
        public UISpreadsheetPanel1Window5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar5 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow6 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow6()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "7";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window6 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window6(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar6 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar6(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window6 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar6 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window6 : WinWindow
    {
        
        public UISpreadsheetPanel1Window6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar6 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow7 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow7()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "8";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window7 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window7(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar7 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar7(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window7 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar7 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window7 : WinWindow
    {
        
        public UISpreadsheetPanel1Window7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar7 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow8 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow8()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "9";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window8 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window8(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar8 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar8(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window8 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar8 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window8 : WinWindow
    {
        
        public UISpreadsheetPanel1Window8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar8 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow9 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow9()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "10";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window9 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window9(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar9 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar9(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window9 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar9 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window9 : WinWindow
    {
        
        public UISpreadsheetPanel1Window9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar9 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow10 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow10()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "11";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window10 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window10(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar10 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar10(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window10 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar10 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window10 : WinWindow
    {
        
        public UISpreadsheetPanel1Window10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar10 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow11 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "12";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window11 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window11(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar11 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar11(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window11 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar11 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window11 : WinWindow
    {
        
        public UISpreadsheetPanel1Window11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar11 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow12 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow12()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "13";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window12 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window12(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar12 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar12(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window12 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar12 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window12 : WinWindow
    {
        
        public UISpreadsheetPanel1Window12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar12 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow13 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow13()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "14";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window13 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window13(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar13 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar13(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window13 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar13 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window13 : WinWindow
    {
        
        public UISpreadsheetPanel1Window13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar13 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow14 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow14()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "15";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window14 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window14(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar14 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar14(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window14 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar14 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window14 : WinWindow
    {
        
        public UISpreadsheetPanel1Window14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar14 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow15 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow15()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "16";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window15 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window15(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar15 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar15(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window15 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar15 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window15 : WinWindow
    {
        
        public UISpreadsheetPanel1Window15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar15 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow16 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow16()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "17";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window16 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window16(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar16 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar16(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window16 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar16 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window16 : WinWindow
    {
        
        public UISpreadsheetPanel1Window16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar16 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow17 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow17()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "18";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window17 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window17(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar17 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar17(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window17 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar17 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window17 : WinWindow
    {
        
        public UISpreadsheetPanel1Window17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar17 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow18 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow18()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "19";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window18 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window18(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar18 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar18(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window18 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar18 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window18 : WinWindow
    {
        
        public UISpreadsheetPanel1Window18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar18 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow19 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow19()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "20";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window19 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window19(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar19 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar19(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window19 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar19 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window19 : WinWindow
    {
        
        public UISpreadsheetPanel1Window19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar19 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow20 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow20()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "21";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window20 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window20(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar20 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar20(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window20 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar20 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window20 : WinWindow
    {
        
        public UISpreadsheetPanel1Window20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar20 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow21 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow21()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "22";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window21 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window21(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar21 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar21(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window21 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar21 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window21 : WinWindow
    {
        
        public UISpreadsheetPanel1Window21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar21 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow22 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow22()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "23";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window22 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window22(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar22 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar22(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window22 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar22 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window22 : WinWindow
    {
        
        public UISpreadsheetPanel1Window22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar22 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow23 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow23()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "24";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window23 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window23(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar23 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar23(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window23 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar23 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window23 : WinWindow
    {
        
        public UISpreadsheetPanel1Window23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar23 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow24 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow24()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "25";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window24 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window24(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar24 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar24(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window24 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar24 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window24 : WinWindow
    {
        
        public UISpreadsheetPanel1Window24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar24 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow25 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow25()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "26";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window25 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window25(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar25 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar25(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window25 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar25 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window25 : WinWindow
    {
        
        public UISpreadsheetPanel1Window25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar25 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow26 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow26()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "27";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window26 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window26(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar26 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar26(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window26 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar26 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window26 : WinWindow
    {
        
        public UISpreadsheetPanel1Window26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar26 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow27 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow27()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "28";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window27 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window27(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar27 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar27(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window27 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar27 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window27 : WinWindow
    {
        
        public UISpreadsheetPanel1Window27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar27 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow28 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow28()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "29";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window28 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window28(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar28 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar28(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window28 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar28 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window28 : WinWindow
    {
        
        public UISpreadsheetPanel1Window28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar28 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow29 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow29()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "30";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window29 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window29(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar29 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar29(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window29 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar29 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window29 : WinWindow
    {
        
        public UISpreadsheetPanel1Window29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar29 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow30 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow30()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "31";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window30 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window30(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar30 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar30(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window30 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar30 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window30 : WinWindow
    {
        
        public UISpreadsheetPanel1Window30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar30 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow31 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow31()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "32";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window31 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window31(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar31 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar31(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window31 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar31 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window31 : WinWindow
    {
        
        public UISpreadsheetPanel1Window31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar31 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow32 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow32()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "33";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window32 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window32(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar32 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar32(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window32 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar32 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window32 : WinWindow
    {
        
        public UISpreadsheetPanel1Window32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar32 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow33 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow33()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "34";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window33 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window33(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar33 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar33(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window33 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar33 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window33 : WinWindow
    {
        
        public UISpreadsheetPanel1Window33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar33 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow34 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow34()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "35";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window34 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window34(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar34 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar34(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window34 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar34 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window34 : WinWindow
    {
        
        public UISpreadsheetPanel1Window34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar34 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow35 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow35()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "36";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window35 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window35(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar35 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar35(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window35 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar35 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window35 : WinWindow
    {
        
        public UISpreadsheetPanel1Window35(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar35 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar35(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow36 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow36()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "37";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window36 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window36(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar36 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar36(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window36 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar36 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window36 : WinWindow
    {
        
        public UISpreadsheetPanel1Window36(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar36 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar36(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow37 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow37()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "38";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window37 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window37(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar37 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar37(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window37 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar37 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window37 : WinWindow
    {
        
        public UISpreadsheetPanel1Window37(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar37 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar37(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow38 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow38()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "39";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window38 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window38(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar38 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar38(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window38 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar38 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window38 : WinWindow
    {
        
        public UISpreadsheetPanel1Window38(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar38 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar38(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow39 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow39()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "40";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window39 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window39(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar39 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar39(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window39 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar39 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window39 : WinWindow
    {
        
        public UISpreadsheetPanel1Window39(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar39 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar39(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow40 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow40()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "41";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window40 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window40(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar40 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar40(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window40 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar40 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window40 : WinWindow
    {
        
        public UISpreadsheetPanel1Window40(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar40 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar40(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledWindow41 : WinWindow
    {
        
        public UISpreadsheetuntitledWindow41()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "42";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window41 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window41(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISpreadsheetuntitledTitleBar41 UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar41(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window41 mUISpreadsheetPanel1Window;
        
        private UISpreadsheetuntitledTitleBar41 mUISpreadsheetuntitledTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetPanel1Window41 : WinWindow
    {
        
        public UISpreadsheetPanel1Window41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetuntitledTitleBar41 : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIErrorExceptionoftypeWindow : WinWindow
    {
        
        public UIErrorExceptionoftypeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Error! Exception of type \'SS.CircularException\' was thrown.";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Error! Exception of type \'SS.CircularException\' was thrown.");
            #endregion
        }
        
        #region Properties
        public UIOKWindow9 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow9(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow9 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOKWindow9 : WinWindow
    {
        
        public UIOKWindow9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Error! Exception of type \'SS.CircularException\' was thrown.");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Error! Exception of type \'SS.CircularException\' was thrown.");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIA9sDependentsAreTheFWindow : WinWindow
    {
        
        public UIA9sDependentsAreTheFWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "A9\'s Dependents Are The Following Cells:";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("A9\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public UIOKWindow10 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow10(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow10 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOKWindow10 : WinWindow
    {
        
        public UIOKWindow10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("A9\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("A9\'s Dependents Are The Following Cells:");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIA5sDependentsAreTheFWindow : WinWindow
    {
        
        public UIA5sDependentsAreTheFWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "A5\'s Dependents Are The Following Cells:";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("A5\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public UIOKWindow11 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow11(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow11 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOKWindow11 : WinWindow
    {
        
        public UIOKWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("A5\'s Dependents Are The Following Cells:");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("A5\'s Dependents Are The Following Cells:");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
